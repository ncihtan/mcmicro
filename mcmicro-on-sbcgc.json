{
    "class": "Workflow",
    "cwlVersion": "v1.2",
    "doc": "**MCMICRO** is an end-to-end processing pipeline for multiplexed whole slide imaging and tissue microarrays. It comprises stitching and registration, segmentation, and single-cell feature extraction. Workflow was originally designed in [Nextflow](https://www.nextflow.io/docs/latest/index.html), but has been translated to CWL by Seven Bridges.\n\n**MCMICRO** consists of several steps. It performs illumination correction, image alignment, segmentation, quality control and data visualization. This is a modular worfklow and additional steps could be added upon request to extend the functionality. This particular version consists of following steps:\n\n* Illumination correction using BaSiC\n* Stitching and registration using Ashlar\n* TMA core detection using Coreograph (optional)\n* Segmentation using multiple segmentation algorithms. Segmentation step produces segmentation masks. Workflow could be modified to obtain probability maps from algortihms which provide them\n* Quantification using MCQuant\n* Analysis using Scimap\n* Visualization using Minerva\n\n### Common Use Cases\n\n**MCMICRO** takes a list of raw microscopy files, as well as a channel marker file. Channel marker file is not required for segmentation or visualization, but is required for quantification. **MCMICRO** works both with TMA and WSI images, but in case of working with TMA images, **Is TMA** parameter should be set to True.\n\nWhen running background subtraction, a background column must be present in the **Channel Marker File**. \n\n\n### Changes Introduced by Seven Bridges\n\nAs workflow was designed to be run in nextflow, several modifications had to be done to implement it in CWL:\n\n* Additional app **SBG Prepare Segmentation Inputs** was created in order to prepare necessary inputs based on previous conditional steps. \n* Workflow is more rigid in terms that it always processes data from the beginning to end, so it does not allow for intermediary files as input as an option to skip steps.\n* Two steps have a different (newer) docker image version compared to the original workflow.\n* One of the segmenters (mesmer) was removed from the workflow as it proved difficult to wrap it in CWL. \n\n### Common Issues and Important Notes\n\n* Workflow was only tested on two datastes, obtained from the MCMicro home page and using suggested parameters.\n* Workflow was tested only on TIFF files. The app should support other file formats as well, but was not tested.\n\n### Performance Benchmarking\n\nFor performance benchmarking, exemplar data from the MCMICRO homepage is used. \n\n\n| Sample  | Total file size | Duration | Cost | Instance (AWS on-demand)|\n|---------------------------|------------------------|-----------------------|--------------------------------|\n| exemplar-001 | 320MB | 5 min |$0.05 | c5.2xlarge 1000 GB EBS | \n| exemplar-002 | 3.5GB | 31min | $0.21 | c5.2xlarge 1000 GB EBS |\n\n\n*Cost can be significantly reduced by using **spot instances**. Visit the [knowledge center](https://docs.sevenbridges.com/docs/about-spot-instances) for more details.*",
    "label": "MCMICRO",
    "$namespaces": {
        "sbg": "https://sevenbridges.com"
    },
    "inputs": [
        {
            "id": "in_raw",
            "sbg:fileTypes": "sld, sldy, tif, aim, al3d, gel, am, amiramesh, grey, hx, labels, cif, img, hdr, sif, png, afi, svs, svs, htd, pnl, avi, arf, exp, tif, spc, sdt, xml, h5, 1sc, pic, raw, xml, scn, ims, img, cr2, crw, ch5, c01, dib, vsi, xml, tif, wpi, tif, dv, r3d, rcpnl, dcm, dicom, v, eps, epsi, ps, flex, mea, res, img, tiff, fits, dm3, dm4, dm2, vff, gif, naf, his, ndpi, ndpis, vms, txt, tif, bmp, jpg, i2i, ics, ids, fff, seq, ipw, hed, img, mod, liff, raw, tif, obf, msr, xdce, tif, frm, inr, hdr, tif, tiff, ipl, ipm, dat, img, par, jpg, jp2, j2k, jpf, jpk, jpx, klb, xv, bip, fli, msr, lei, tif, lif, lof, scn, xlef, sxm, tif, tiff, l2d, tif, scn, lim, tiff, stk, nd, htd, tif, tiff, tif, tif, txt, xml, tif, tiff, mnc, mrw, mng, stp, mrc, st, ali, map, rec, mrcs, nef, tif, img, hdr, nii, nii.gz, tiff, tiff, nd2, nrrd, nhdr, raw, txt, apl, mtb, tnb, tif, obsep, oib, oif, tif, oir, omp2info, xml, dat, tif, tiff, ome.tiff, ome.tif, ome.tf2, ome.tf8, ome.btf, ome, ome.xml, top, pcoraw, rec, pcx, pds, xml, csv, tif, im3, tiff, xml, tif, 0.2, 0.3, 0.4, etc., pbm, pgm, ppm, psd, tif, tiff, bin, pict, png, tif, xml, cfg, spe, afm, mov, sm2, sm3, xqd, xqf, cxd, tiff, spi, stk, tga, db, tif, txt, tiff, tif, tf2, tf8, btf, vws, tfr, ffr, zfr, zfp, 2fl, tif, sld, jpg, pr3, dat, hdr, fdf, tif, qptiff, hdf, bif, dti, xys, html, mvd2, acff, wat, bmp, wlz, lms, xml, tif, zvi, czi, lsm, mdb",
            "type": "File[]",
            "label": "Raw files",
            "doc": "Raw .tiff file which needs illumination correction.",
            "sbg:x": -396.84027099609375,
            "sbg:y": 21.899988174438477
        },
        {
            "id": "in_marker_file",
            "sbg:fileTypes": "CSV",
            "type": "File?",
            "label": "Channel marker file",
            "sbg:x": -181.34506225585938,
            "sbg:y": -238.18638610839844
        },
        {
            "id": "run_bs",
            "type": "boolean",
            "label": "Run background substraction",
            "doc": "If this is set to true, background subtraction will be performed after registration. Note that in order to successfully run BS, marker file must contain background information.",
            "sbg:x": -179.85858154296875,
            "sbg:y": 244
        },
        {
            "id": "tma",
            "type": "boolean",
            "label": "Is TMA",
            "doc": "Set to true if working with TMA images.\nSet to false if working with WSI images.",
            "sbg:x": -70.73737335205078,
            "sbg:y": 387.6464538574219
        },
        {
            "id": "skip_recyze",
            "type": "boolean?",
            "label": "Skip recyze",
            "doc": "If this flag is turned one. No image modification will be done, and the input file will be propagated to the output",
            "sbg:exposed": true
        },
        {
            "id": "channels",
            "type": "string?",
            "label": "Channels",
            "doc": "Space-delimited list of channels. If not provided, default channel 0 will be used.",
            "sbg:exposed": true
        }
    ],
    "outputs": [
        {
            "id": "out_tables",
            "outputSource": [
                "mcmicro_segmentation_1/out_tables"
            ],
            "sbg:fileTypes": "CSV, JSON",
            "type": "File[]?",
            "label": "Quantification tables",
            "sbg:x": 1508.622802734375,
            "sbg:y": -462.8641662597656
        },
        {
            "id": "out_image",
            "outputSource": [
                "mcmicro_segmentation_1/out_image"
            ],
            "sbg:fileTypes": "tif, tiff, TIF, TIFF",
            "type": "File[]?",
            "label": "Segmented Images",
            "sbg:x": 1441.892822265625,
            "sbg:y": -94
        },
        {
            "id": "out_viz",
            "outputSource": [
                "mcmicro_viz/out_viz"
            ],
            "type": "Directory?",
            "label": "Output visualizations",
            "sbg:x": 1668.499755859375,
            "sbg:y": 119.83342742919922
        },
        {
            "id": "plots",
            "outputSource": [
                "mcmicro_scimap/plots"
            ],
            "type": [
                "null",
                "Directory",
                {
                    "type": "array",
                    "items": "Directory"
                }
            ],
            "label": "Plots",
            "doc": "Directory containing plots generated by Scimap",
            "sbg:x": 1860.8228759765625,
            "sbg:y": -338.48675537109375
        }
    ],
    "steps": [
        {
            "id": "mcmicro_basic",
            "in": [
                {
                    "id": "in_raw",
                    "source": "in_raw"
                }
            ],
            "out": [
                {
                    "id": "out_dfp"
                },
                {
                    "id": "out_ffp"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.2",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "boris_majic/mcmicro-dev/mcmicro-basic/4",
                "baseCommand": [
                    "/opt/fiji/Fiji.app/ImageJ-linux64",
                    "--ij2",
                    "--headless",
                    "--run",
                    "/opt/fiji/imagej_basic_ashlar.py"
                ],
                "inputs": [
                    {
                        "sbg:category": "Inputs",
                        "id": "in_raw",
                        "type": "File",
                        "label": "Raw file",
                        "doc": "Raw .tiff file which needs illumination correction.",
                        "sbg:fileTypes": "sld, sldy, tif, aim, al3d, gel, am, amiramesh, grey, hx, labels, cif, img, hdr, sif, png, afi, svs, svs, htd, pnl, avi, arf, exp, tif, spc, sdt, xml, h5, 1sc, pic, raw, xml, scn, ims, img, cr2, crw, ch5, c01, dib, vsi, xml, tif, wpi, tif, dv, r3d, rcpnl, dcm, dicom, v, eps, epsi, ps, flex, mea, res, img, tiff, fits, dm3, dm4, dm2, vff, gif, naf, his, ndpi, ndpis, vms, txt, tif, bmp, jpg, i2i, ics, ids, fff, seq, ipw, hed, img, mod, liff, raw, tif, obf, msr, xdce, tif, frm, inr, hdr, tif, tiff, ipl, ipm, dat, img, par, jpg, jp2, j2k, jpf, jpk, jpx, klb, xv, bip, fli, msr, lei, tif, lif, lof, scn, xlef, sxm, tif, tiff, l2d, tif, scn, lim, tiff, stk, nd, htd, tif, tiff, tif, tif, txt, xml, tif, tiff, mnc, mrw, mng, stp, mrc, st, ali, map, rec, mrcs, nef, tif, img, hdr, nii, nii.gz, tiff, tiff, nd2, nrrd, nhdr, raw, txt, apl, mtb, tnb, tif, obsep, oib, oif, tif, oir, omp2info, xml, dat, tif, tiff, ome.tiff, ome.tif, ome.tf2, ome.tf8, ome.btf, ome, ome.xml, top, pcoraw, rec, pcx, pds, xml, csv, tif, im3, tiff, xml, tif, 0.2, 0.3, 0.4, etc., pbm, pgm, ppm, psd, tif, tiff, bin, pict, png, tif, xml, cfg, spe, afm, mov, sm2, sm3, xqd, xqf, cxd, tiff, spi, stk, tga, db, tif, txt, tiff, tif, tf2, tf8, btf, vws, tfr, ffr, zfr, zfp, 2fl, tif, sld, jpg, pr3, dat, hdr, fdf, tif, qptiff, hdf, bif, dti, xys, html, mvd2, acff, wat, bmp, wlz, lms, xml, tif, zvi, czi, lsm, mdb"
                    },
                    {
                        "sbg:category": "General",
                        "sbg:toolDefaultValue": "my_experiment",
                        "id": "experiment_name",
                        "type": "string?",
                        "label": "Experiment name",
                        "doc": "Experiment name"
                    }
                ],
                "outputs": [
                    {
                        "id": "out_dfp",
                        "label": "Dark field profile",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*dfp.tif",
                            "outputEval": "$(inheritMetadata(self, inputs.in_raw))"
                        },
                        "sbg:fileTypes": "TIF"
                    },
                    {
                        "id": "out_ffp",
                        "label": "Flat field profile",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*ffp.tif",
                            "outputEval": "$(inheritMetadata(self, inputs.in_raw))"
                        },
                        "sbg:fileTypes": "TIF"
                    }
                ],
                "doc": "**A BaSiC Tool for Background and Shading Correction of Optical Microscopy Images**. This particular wrapper is intended for use in a MCMICRO [1] worfklow and contains plugin for FIJI which is executed as a headerless ImageJ script.\n\n*A list of **all inputs and parameters** with corresponding descriptions can be found at the bottom of this page.*\n\n***Please note that any cloud infrastructure costs resulting from app and pipeline executions, including the use of public apps, are the sole responsibility of you as a user. To avoid excessive costs, please read the app description carefully and set the app parameters and execution settings accordingly.***\n\n\n### Common Use Cases\n\nMicroscope illumination is rarely perfectly stable over these long periods of time, so individual tile illumination is not entirely uniform. This App corrects for these issues with a process known as *flat fielding* using the BaSiC software package [2].\n\n### Changes Introduced by Seven Bridges\n\nThere have been no changes introduced by Seven Bridges. All inputs and outputs are wrapped.\n\n### Common Issues and Important Notes\n\nEven though the authors of this App claim that it should work with all open microscopy [Bio Formats](https://www.openmicroscopy.org/bio-formats/), SB has tested it only with TIFF files. If you have trouble with running this App with other image formats, feel free to contact Seven Bridges support.\n\nNo issues have been found during testing the app.\n\n### References\n[1] https://mcmicro.org/ \\\n[2] https://www.nature.com/articles/ncomms14836",
                "label": "MCMICRO - BaSiC",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 0,
                        "valueFrom": "${\n    var experiment_name = inputs.experiment_name;\n    if (!experiment_name)\n        experiment_name = inputs.in_raw.nameroot;\n    var cmd = \"\\\"filename='\" + inputs.in_raw.path + \"',output_dir='.',\";\n    var cmd = cmd + \"experiment_name='\" + experiment_name + \"'\\\"\";\n    return cmd\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": 4096,
                        "coresMin": 4
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "labsyspharm/basic-illumination:1.1.1"
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!o2) {\n        return o1;\n    };\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n        for (var key in commonMetadata) {\n            if (!(key in example)) {\n                delete commonMetadata[key]\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n        if (o1.secondaryFiles) {\n            o1.secondaryFiles = inheritMetadata(o1.secondaryFiles, o2)\n        }\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n            if (o1[i].secondaryFiles) {\n                o1[i].secondaryFiles = inheritMetadata(o1[i].secondaryFiles, o2)\n            }\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:AWSInstanceType",
                        "value": "c5.2xlarge;ebs-gp2;1024"
                    }
                ],
                "sbg:projectName": "MCMICRO - DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1668093129,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1668095710,
                        "sbg:revisionNotes": "Start wrapping"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1668770305,
                        "sbg:revisionNotes": "Rev 2 - ready for testing"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1668770746,
                        "sbg:revisionNotes": "Fix output handling"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1668772756,
                        "sbg:revisionNotes": "Add polish"
                    }
                ],
                "sbg:image_url": null,
                "sbg:toolkit": "MCMICRO",
                "sbg:license": "MIT",
                "sbg:wrapperLicense": "MIT",
                "sbg:wrapperAuthor": "SBG",
                "sbg:categories": [
                    "Imaging"
                ],
                "sbg:links": [
                    {
                        "id": "https://www.nature.com/articles/ncomms14836",
                        "label": "Publication"
                    },
                    {
                        "id": "https://github.com/labsyspharm/basic-illumination",
                        "label": "Git"
                    },
                    {
                        "id": "https://github.com/labsyspharm/basic-illumination/blob/master/LICENSE",
                        "label": "License"
                    }
                ],
                "sbg:appVersion": [
                    "v1.2"
                ],
                "sbg:id": "h-839316ea/h-2de6b83e/h-6acfd7bb/0",
                "sbg:revision": 4,
                "sbg:revisionNotes": "Add polish",
                "sbg:modifiedOn": 1668772756,
                "sbg:modifiedBy": "boris_majic",
                "sbg:createdOn": 1668093129,
                "sbg:createdBy": "boris_majic",
                "sbg:project": "boris_majic/mcmicro-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "boris_majic"
                ],
                "sbg:latestRevision": 4,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a70d965d4e73d9ae41b217d0fa4e06ed89f956c6ce2ef333196e431192e4206b9",
                "sbg:workflowLanguage": "CWL"
            },
            "label": "MCMICRO - BaSiC",
            "scatter": [
                "in_raw"
            ],
            "sbg:x": -189,
            "sbg:y": 67
        },
        {
            "id": "ashlar",
            "in": [
                {
                    "id": "in_raw_files",
                    "source": [
                        "in_raw"
                    ]
                },
                {
                    "id": "in_ffps",
                    "source": [
                        "mcmicro_basic/out_ffp"
                    ]
                },
                {
                    "id": "in_dfps",
                    "source": [
                        "mcmicro_basic/out_dfp"
                    ]
                }
            ],
            "out": [
                {
                    "id": "out_img"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.2",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "boris_majic/mcmicro-dev/ashlar/4",
                "baseCommand": [
                    "ashlar"
                ],
                "inputs": [
                    {
                        "sbg:category": "Input",
                        "id": "in_raw_files",
                        "type": "File[]",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 0,
                            "valueFrom": "${\n    function compare( a, b ) {\n        if ( a.basename < b.basename ){\n            return -1;\n        }\n        if ( a.basename > b.basename ){\n            return 1;\n        }\n        return 0;\n    }\n    \n    var sorted_raws = inputs.in_raw_files.sort(compare);\n    var cmd = \"\";\n    for (var i = 0; i < sorted_raws.length; i++) {\n        cmd += sorted_raws[i].path + \" \";\n    }\n    return cmd\n}"
                        },
                        "label": "Raw files",
                        "sbg:fileTypes": "TIF, TIFF, OME.TIF"
                    },
                    {
                        "id": "in_ffps",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "--ffp",
                            "shellQuote": false,
                            "position": 5,
                            "valueFrom": "${\n    function compare( a, b ) {\n        if ( a.basename < b.basename ){\n            return -1;\n            \n        }\n        if ( a.basename > b.basename ){\n            return 1;\n            \n        }\n        return 0;\n        \n    }\n    \n    return inputs.in_ffps.sort(compare)\n}"
                        },
                        "label": "Flat fields",
                        "sbg:fileTypes": "TIF, TIFF"
                    },
                    {
                        "sbg:category": "Input",
                        "id": "in_dfps",
                        "type": "File[]?",
                        "inputBinding": {
                            "prefix": "--dfp",
                            "shellQuote": false,
                            "position": 6,
                            "valueFrom": "${\n    function compare( a, b ) {\n        if ( a.basename < b.basename ){\n            return -1;\n        }\n        if ( a.basename > b.basename ){\n            return 1;\n        }\n        return 0;\n    }\n    \n    var sorted_dfps = inputs.in_dfps.sort(compare);\n    var cmd = \"\";\n    for (var i = 0; i < sorted_dfps.length; i++) {\n        cmd += sorted_dfps[i].path + \" \";\n    }\n    return cmd\n}"
                        },
                        "label": "Dark fields",
                        "sbg:fileTypes": "TIF, TIFF"
                    },
                    {
                        "id": "in_sample_name",
                        "type": "string?",
                        "inputBinding": {
                            "prefix": "-o",
                            "shellQuote": false,
                            "position": 7,
                            "valueFrom": "${\n    if(self)\n        return self + '_reg.ome.tif'\n    else\n    {\n        return inputs.in_raw_files[0].nameroot + \"_reg.ome.tif\"\n    }\n}"
                        }
                    },
                    {
                        "id": "maximum-shift",
                        "type": "int?",
                        "inputBinding": {
                            "prefix": "-m",
                            "shellQuote": false,
                            "position": 2
                        },
                        "label": "Maximum shift",
                        "doc": "Maximum allowed per-tile corrective shift in microns (default: 15).",
                        "default": 15
                    }
                ],
                "outputs": [
                    {
                        "id": "out_img",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.ome.tif"
                        },
                        "sbg:fileTypes": "TIF, TIFF"
                    }
                ],
                "doc": "**ASHLAR: Alignment by Simultaneous Harmonization of Layer/Adjacency Registration**.\n\nAshlar performs fast, high-quality stitching of microscopy images. It also co-registers multiple rounds of cyclic imaging for methods such as CyCIF and CODEX. Ashlar can read image data directly from BioFormats-supported microscope vendor file formats as well as a directory of plain TIFF files. Output is saved as pyramidal, tiled OME-TIFF.\n\nNote that Ashlar requires unstitched individual \"tile\" images as input, so it is not suitable for microscopes or slide scanners that only provide pre-stitched images.\n\nFlat fields and dark fields are optional. In case when multiple image files are provided and a single field, the same field will be applied to each of the input images.",
                "label": "ASHLAR",
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "ResourceRequirement",
                        "ramMin": 7000,
                        "coresMin": 8
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "labsyspharm/ashlar:1.17.0"
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ],
                "hints": [
                    {
                        "class": "sbg:AWSInstanceType",
                        "value": "c5.2xlarge;ebs-gp2;1024"
                    }
                ],
                "sbg:projectName": "MCMICRO - DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1668876720,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1668952468,
                        "sbg:revisionNotes": "Initial revision"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1669384415,
                        "sbg:revisionNotes": "Remove shell quotes"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675503629,
                        "sbg:revisionNotes": "Add additional parameters"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675713685,
                        "sbg:revisionNotes": "Better formatting"
                    }
                ],
                "sbg:image_url": null,
                "sbg:links": [
                    {
                        "id": "https://github.com/labsyspharm/ashlar",
                        "label": "Git"
                    },
                    {
                        "id": "https://labsyspharm.github.io/ashlar/",
                        "label": "Wiki"
                    },
                    {
                        "id": "https://www.biorxiv.org/content/10.1101/2021.04.20.440625v2",
                        "label": "Publication"
                    }
                ],
                "sbg:categories": [
                    "Imaging"
                ],
                "sbg:appVersion": [
                    "v1.2"
                ],
                "sbg:id": "h-d16ef875/h-0b9dd17b/h-7eb0b018/0",
                "sbg:revision": 4,
                "sbg:revisionNotes": "Better formatting",
                "sbg:modifiedOn": 1675713685,
                "sbg:modifiedBy": "boris_majic",
                "sbg:createdOn": 1668876720,
                "sbg:createdBy": "boris_majic",
                "sbg:project": "boris_majic/mcmicro-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "boris_majic"
                ],
                "sbg:latestRevision": 4,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a9fbbe40a1ff51766d1210f9f6f5ed24abfe3e623297b2656f82ffa84c6e28940",
                "sbg:workflowLanguage": "CWL"
            },
            "label": "ASHLAR",
            "sbg:x": 85,
            "sbg:y": -31
        },
        {
            "id": "mcmicro_background",
            "in": [
                {
                    "id": "in_image",
                    "source": "ashlar/out_img"
                },
                {
                    "id": "in_marker_file",
                    "source": "in_marker_file"
                },
                {
                    "id": "custom_input",
                    "source": "run_bs"
                }
            ],
            "out": [
                {
                    "id": "out_image"
                },
                {
                    "id": "out_marker_file"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.2",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "boris_majic/mcmicro-dev/mcmicro-background/1",
                "baseCommand": [
                    "python3",
                    "/background_subtraction/background_sub.py"
                ],
                "inputs": [
                    {
                        "id": "in_image",
                        "type": "File",
                        "inputBinding": {
                            "prefix": "-r",
                            "shellQuote": false,
                            "position": 2
                        },
                        "label": "Input image",
                        "sbg:fileTypes": "TIF, TIFF"
                    },
                    {
                        "id": "in_marker_file",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "-m",
                            "shellQuote": false,
                            "position": 4
                        },
                        "label": "Channel marker file",
                        "sbg:fileTypes": "CSV"
                    },
                    {
                        "id": "out_filename",
                        "type": "string?",
                        "label": "Output prefix",
                        "doc": "If not given, *_backsub* will be appended to the input file basename.\n\nFilename should contain extension as well and will be used as a full output filename, not as a nameroot."
                    }
                ],
                "outputs": [
                    {
                        "id": "out_image",
                        "label": "Background removed image",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "${\n    if(inputs.out_filename)\n        return inputs.out_filename\n    else\n        return '*backsub*'\n}",
                            "outputEval": "$(inheritMetadata(self, inputs.in_image))"
                        },
                        "sbg:fileTypes": "TIF, OME.TIF, TIFF"
                    },
                    {
                        "id": "out_marker_file",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "markers_bs.csv"
                        }
                    }
                ],
                "label": "MCMICRO - Background",
                "arguments": [
                    {
                        "prefix": "-o",
                        "shellQuote": false,
                        "position": 1,
                        "valueFrom": "${\n    if(!inputs.out_filename)\n    {\n        if(inputs.in_image.basename.includes('.ome'))\n        {\n            return inputs.in_image.basename.split('.ome')[0] + '_backsub.ome' + inputs.in_image.nameext\n        }\n        return inputs.in_image.nameroot + '_backsub' + inputs.in_image.nameext\n    }\n    else\n    {\n        return inputs.out_filename\n    }\n}"
                    },
                    {
                        "prefix": "-mo",
                        "shellQuote": false,
                        "position": 5,
                        "valueFrom": "markers_bs.csv"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "ghcr.io/schapirolabor/background_subtraction:v0.3.3"
                    },
                    {
                        "class": "InlineJavascriptRequirement",
                        "expressionLib": [
                            "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!o2) {\n        return o1;\n    };\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n        for (var key in commonMetadata) {\n            if (!(key in example)) {\n                delete commonMetadata[key]\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n        if (o1.secondaryFiles) {\n            o1.secondaryFiles = inheritMetadata(o1.secondaryFiles, o2)\n        }\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n            if (o1[i].secondaryFiles) {\n                o1[i].secondaryFiles = inheritMetadata(o1[i].secondaryFiles, o2)\n            }\n        }\n    }\n    return o1;\n};"
                        ]
                    }
                ],
                "sbg:projectName": "MCMICRO - DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675712592,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675713502,
                        "sbg:revisionNotes": "Initial revision"
                    }
                ],
                "sbg:image_url": null,
                "sbg:appVersion": [
                    "v1.2"
                ],
                "sbg:id": "h-fbb1a12b/h-902b6e76/h-362e740f/0",
                "sbg:revision": 1,
                "sbg:revisionNotes": "Initial revision",
                "sbg:modifiedOn": 1675713502,
                "sbg:modifiedBy": "boris_majic",
                "sbg:createdOn": 1675712592,
                "sbg:createdBy": "boris_majic",
                "sbg:project": "boris_majic/mcmicro-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "boris_majic"
                ],
                "sbg:latestRevision": 1,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "aded85e5a309dfea33dbfd3dba14214d33bd5c5dd31c46ff752a48a255fc36a4a",
                "sbg:workflowLanguage": "CWL"
            },
            "label": "MCMICRO - Background",
            "sbg:x": 410.5863342285156,
            "sbg:y": -110.66776275634766,
            "when": "$(inputs.custom_input)"
        },
        {
            "id": "mcmicro_dearray",
            "in": [
                {
                    "id": "in_image",
                    "source": [
                        "mcmicro_background/out_image",
                        "ashlar/out_img"
                    ],
                    "pickValue": "first_non_null"
                },
                {
                    "id": "custom_input",
                    "source": "tma"
                }
            ],
            "out": [
                {
                    "id": "out_masks"
                },
                {
                    "id": "out_cores"
                }
            ],
            "run": {
                "class": "Workflow",
                "cwlVersion": "v1.2",
                "id": "boris_majic/mcmicro-dev/mcmicro-dearray/1",
                "label": "MCMICRO - Dearray",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "inputs": [
                    {
                        "id": "in_image",
                        "sbg:fileTypes": "TIF, TIFF",
                        "type": "File?",
                        "label": "Input image",
                        "doc": "TMA images",
                        "sbg:x": -350,
                        "sbg:y": -82
                    }
                ],
                "outputs": [
                    {
                        "id": "out_masks",
                        "outputSource": [
                            "mcmicro_coreograph/out_masks"
                        ],
                        "sbg:fileTypes": "TIF, TIFF",
                        "type": "File[]?",
                        "label": "Output masks",
                        "sbg:x": 327,
                        "sbg:y": -158
                    },
                    {
                        "id": "out_cores",
                        "outputSource": [
                            "mcmicro_pyramidize/out_image"
                        ],
                        "sbg:fileTypes": "TIF, TIFF, tif, tiff",
                        "type": "File?",
                        "label": "Output cores",
                        "sbg:x": 327,
                        "sbg:y": 10
                    }
                ],
                "steps": [
                    {
                        "id": "mcmicro_coreograph",
                        "in": [
                            {
                                "id": "in_image",
                                "source": "in_image"
                            }
                        ],
                        "out": [
                            {
                                "id": "out_masks"
                            },
                            {
                                "id": "out_cores"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-coreograph/4",
                            "baseCommand": [
                                "python",
                                "/app/UNetCoreograph.py",
                                "--outputPath",
                                "."
                            ],
                            "inputs": [
                                {
                                    "id": "in_image",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--imagePath",
                                        "shellQuote": false,
                                        "position": 0
                                    },
                                    "label": "Input image",
                                    "doc": "TMA images",
                                    "sbg:fileTypes": "TIF, TIFF"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "out_masks",
                                    "label": "Output masks",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "**_mask.tif",
                                        "outputEval": "$(inheritMetadata(self, inputs.in_image))"
                                    },
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "id": "out_cores",
                                    "label": "Output core images",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "**{,[A-Z],[A-Z][A-Z]}{[0-9],[0-9][0-9]}.tif",
                                        "outputEval": "$(inheritMetadata(self, inputs.in_image))"
                                    },
                                    "sbg:fileTypes": "TIF, TIFF"
                                }
                            ],
                            "doc": "This tool should be run only on TMA images.",
                            "label": "MCMICRO - Coreograph",
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "labsyspharm/unetcoreograph"
                                },
                                {
                                    "class": "InlineJavascriptRequirement",
                                    "expressionLib": [
                                        "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!o2) {\n        return o1;\n    };\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n        for (var key in commonMetadata) {\n            if (!(key in example)) {\n                delete commonMetadata[key]\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n        if (o1.secondaryFiles) {\n            o1.secondaryFiles = inheritMetadata(o1.secondaryFiles, o2)\n        }\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n            if (o1[i].secondaryFiles) {\n                o1[i].secondaryFiles = inheritMetadata(o1[i].secondaryFiles, o2)\n            }\n        }\n    }\n    return o1;\n};"
                                    ]
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1669801187,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1670842464,
                                    "sbg:revisionNotes": "Catch all for now"
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1670844233,
                                    "sbg:revisionNotes": "Check for outputs"
                                },
                                {
                                    "sbg:revision": 3,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1670844693,
                                    "sbg:revisionNotes": "Catch masks maybe"
                                },
                                {
                                    "sbg:revision": 4,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675714902,
                                    "sbg:revisionNotes": "Formatting"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-8cf38c92/h-cc373435/h-78578a57/0",
                            "sbg:revision": 4,
                            "sbg:revisionNotes": "Formatting",
                            "sbg:modifiedOn": 1675714902,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1669801187,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 4,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a5ecb253ee79b03719b6377266a42d56f12c65d269d8b9ba44a8596eebcfba4a5",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - Coreograph",
                        "sbg:x": -169.8402862548828,
                        "sbg:y": -82.10001373291016
                    },
                    {
                        "id": "mcmicro_pyramidize",
                        "in": [
                            {
                                "id": "in_image",
                                "source": "mcmicro_coreograph/out_cores"
                            }
                        ],
                        "out": [
                            {
                                "id": "out_image"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-pyramidize/2",
                            "baseCommand": [
                                "python",
                                "pyramidize.py"
                            ],
                            "inputs": [
                                {
                                    "id": "in_image",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--in",
                                        "shellQuote": false,
                                        "position": 0
                                    },
                                    "label": "Input Image",
                                    "sbg:fileTypes": "TIF, TIFF, tif, tiff"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "out_image",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "*tif",
                                        "outputEval": "$(inheritMetadata(self, inputs.in_image))"
                                    },
                                    "sbg:fileTypes": "TIF, TIFF, tif, tiff"
                                }
                            ],
                            "label": "MCMICRO - Pyramidize",
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "labsyspharm/roadie:2022-10-20"
                                },
                                {
                                    "class": "InitialWorkDirRequirement",
                                    "listing": [
                                        {
                                            "entryname": "pyramidize.py",
                                            "entry": "import os\nimport argparse\nimport palom.reader\nimport palom.pyramid\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--in', type=str, required=True, help=\"Input Image Path\")\n    parser.add_argument('--out', type=str, required=False, help=\"Output JSON Path\")\n    args = parser.parse_args()\n\n    # Automatically infer the output filename, if not specified\n    in_path = vars(args)['in']\n    out_path = args.out\n    if out_path is None:\n        tokens = os.path.basename(in_path).split(os.extsep)\n        if len(tokens) < 2:       stem = in_path\n        elif tokens[-2] == \"ome\": stem = os.extsep.join(tokens[0:-2])\n        else:                     stem = os.extsep.join(tokens[0:-1])\n        out_path = stem + \".ome.tif\"\n\n    # Use palom to pyramidize the input image\n    img = palom.reader.OmePyramidReader(in_path)\n    palom.pyramid.write_pyramid([img.pyramid[0]], out_path)",
                                            "writable": false
                                        }
                                    ]
                                },
                                {
                                    "class": "InlineJavascriptRequirement",
                                    "expressionLib": [
                                        "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!o2) {\n        return o1;\n    };\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n        for (var key in commonMetadata) {\n            if (!(key in example)) {\n                delete commonMetadata[key]\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n        if (o1.secondaryFiles) {\n            o1.secondaryFiles = inheritMetadata(o1.secondaryFiles, o2)\n        }\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n            if (o1[i].secondaryFiles) {\n                o1[i].secondaryFiles = inheritMetadata(o1[i].secondaryFiles, o2)\n            }\n        }\n    }\n    return o1;\n};"
                                    ]
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1670844861,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1670845462,
                                    "sbg:revisionNotes": "Catch all files for now"
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1670845725,
                                    "sbg:revisionNotes": "Fix output"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-46475161/h-3e53d4b1/h-20911a76/0",
                            "sbg:revision": 2,
                            "sbg:revisionNotes": "Fix output",
                            "sbg:modifiedOn": 1670845725,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1670844861,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 2,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a6104fa4634ed29b268d7f7dac19313d1df6fee2665cc950f77cbe4265d54d081",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - Pyramidize",
                        "scatter": [
                            "in_image"
                        ],
                        "sbg:x": 124,
                        "sbg:y": 10
                    }
                ],
                "requirements": [
                    {
                        "class": "ScatterFeatureRequirement"
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    },
                    {
                        "class": "StepInputExpressionRequirement"
                    }
                ],
                "sbg:projectName": "MCMICRO - DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675714843,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675715013,
                        "sbg:revisionNotes": "Initial revision"
                    }
                ],
                "sbg:image_url": "https://igor.sbgenomics.com/ns/brood/images/boris_majic/mcmicro-dev/mcmicro-dearray/1.png",
                "sbg:appVersion": [
                    "v1.2"
                ],
                "sbg:id": "h-77fa93c7/h-0280a615/h-6a17d2d3/0",
                "sbg:revision": 1,
                "sbg:revisionNotes": "Initial revision",
                "sbg:modifiedOn": 1675715013,
                "sbg:modifiedBy": "boris_majic",
                "sbg:createdOn": 1675714843,
                "sbg:createdBy": "boris_majic",
                "sbg:project": "boris_majic/mcmicro-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "boris_majic"
                ],
                "sbg:latestRevision": 1,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "af9918e16973ee1f40f3ee1b41e27a0de4408dbe8d5cdeab8ffa3c975f06ce8f4",
                "sbg:workflowLanguage": "CWL"
            },
            "label": "MCMICRO - Dearray",
            "sbg:x": 580.6480712890625,
            "sbg:y": 58.17597579956055,
            "when": "$(inputs.custom_input)"
        },
        {
            "id": "sbg_prepare_segmentation_inputs",
            "in": [
                {
                    "id": "in_cores",
                    "source": [
                        "mcmicro_dearray/out_cores"
                    ]
                },
                {
                    "id": "in_masks",
                    "source": [
                        "mcmicro_dearray/out_masks"
                    ]
                },
                {
                    "id": "in_image",
                    "source": [
                        "mcmicro_background/out_image",
                        "ashlar/out_img"
                    ],
                    "pickValue": "first_non_null"
                },
                {
                    "id": "is_tma",
                    "source": "tma"
                }
            ],
            "out": [
                {
                    "id": "out_masks"
                },
                {
                    "id": "out_images"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.2",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "boris_majic/mcmicro-dev/sbg-prepare-segmentation-inputs/1",
                "baseCommand": [],
                "inputs": [
                    {
                        "id": "in_cores",
                        "type": "File[]?",
                        "label": "Core files",
                        "sbg:fileTypes": "TIF, TIFF"
                    },
                    {
                        "id": "in_masks",
                        "type": "File[]?",
                        "label": "Mask files",
                        "sbg:fileTypes": "TIF, TIFF"
                    },
                    {
                        "id": "in_image",
                        "type": "File?",
                        "label": "Registration image",
                        "doc": "Output of image stacking.",
                        "sbg:fileTypes": "TIF, TIFF, OME.TIF, OME.TIFF"
                    },
                    {
                        "id": "is_tma",
                        "type": "boolean?",
                        "label": "Is TMA",
                        "doc": "If set to true, masks and cores will be expected."
                    }
                ],
                "outputs": [
                    {
                        "id": "out_masks",
                        "doc": "Sorted mask files",
                        "label": "Out masks",
                        "type": "File[]?",
                        "outputBinding": {
                            "outputEval": "${\n    var sortByBasename = function(array, prefix) {\n      return array.sort(function(a, b) {\n        if (a.basename < b.basename) return -1;\n        if (a.basename > b.basename) return 1;\n        return 0;\n      }).map(function(file) {\n        return Object.assign({}, file, { basename: prefix + file.basename });\n      });\n    };\n\n    if(!inputs.is_tma)\n        return null\n    \n    return sortByBasename(inputs.in_masks, inputs.in_image.nameroot + '_')\n    \n}"
                        },
                        "sbg:fileTypes": "TIF, TIFF"
                    },
                    {
                        "id": "out_images",
                        "doc": "Sorted Image file(s)",
                        "label": "Image files",
                        "type": "File[]?",
                        "outputBinding": {
                            "outputEval": "${\n    var sortByBasename = function(array, prefix) {\n      return array.sort(function(a, b) {\n        if (a.basename < b.basename) return -1;\n        if (a.basename > b.basename) return 1;\n        return 0;\n      }).map(function(file) {\n        return Object.assign({}, file, { basename: prefix + file.basename });\n      });\n    };\n\n    if(!inputs.is_tma)\n        return [inputs.in_image]\n    \n    return sortByBasename(inputs.in_cores, inputs.in_image.nameroot + '_')\n    \n}"
                        },
                        "sbg:fileTypes": "TIF, TIFF, OME.TIF, OME.TIFF"
                    }
                ],
                "doc": "**SBG Prepare Segmentation Inputs** Is used to prepare inputs for **MCMICRO Segmentation**.\n\nThis App takes different optional inputs and outputs from optional intermediary steps of the MCMICRO workflow, and prepares two input nodes for **MCMICRO Segmentation**. The App behaves differently depending on if input files are TMA or WSI images.",
                "label": "SBG Prepare Segmentation Inputs",
                "requirements": [
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ],
                "sbg:projectName": "MCMICRO - DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675715899,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675717493,
                        "sbg:revisionNotes": "Initial revision"
                    }
                ],
                "sbg:image_url": null,
                "sbg:categories": [
                    "Utilities"
                ],
                "sbg:appVersion": [
                    "v1.2"
                ],
                "sbg:id": "h-372f6fb6/h-22b57010/h-d73120e6/0",
                "sbg:revision": 1,
                "sbg:revisionNotes": "Initial revision",
                "sbg:modifiedOn": 1675717493,
                "sbg:modifiedBy": "boris_majic",
                "sbg:createdOn": 1675715899,
                "sbg:createdBy": "boris_majic",
                "sbg:project": "boris_majic/mcmicro-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "boris_majic"
                ],
                "sbg:latestRevision": 1,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a04bcd002117ebdf180c6d8960b981e2e0c72a903071c3dba0f43ebc81cf737db",
                "sbg:workflowLanguage": "CWL"
            },
            "label": "SBG Prepare Segmentation Inputs",
            "sbg:x": 887.1497192382812,
            "sbg:y": -68.75575256347656
        },
        {
            "id": "mcmicro_segmentation_1",
            "in": [
                {
                    "id": "in_image",
                    "source": "sbg_prepare_segmentation_inputs/out_images"
                },
                {
                    "id": "skip_recyze",
                    "source": "skip_recyze"
                },
                {
                    "id": "channels",
                    "source": "channels"
                },
                {
                    "id": "in_mask",
                    "source": "sbg_prepare_segmentation_inputs/out_masks"
                },
                {
                    "id": "is_tma",
                    "source": "tma"
                },
                {
                    "id": "in_marker",
                    "source": [
                        "mcmicro_background/out_marker_file",
                        "in_marker_file"
                    ],
                    "pickValue": "first_non_null"
                }
            ],
            "out": [
                {
                    "id": "out_image"
                },
                {
                    "id": "out_tables"
                }
            ],
            "run": {
                "class": "Workflow",
                "cwlVersion": "v1.2",
                "id": "boris_majic/mcmicro-dev/mcmicro-segmentation-1/7",
                "label": "MCMICRO - Segmentation",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "inputs": [
                    {
                        "id": "in_image",
                        "type": "File",
                        "sbg:x": -709.2947387695312,
                        "sbg:y": -213.57894897460938
                    },
                    {
                        "id": "skip_recyze",
                        "type": "boolean?",
                        "label": "Skip recyze",
                        "doc": "If this flag is turned one. No image modification will be done, and the input file will be propagated to the output",
                        "sbg:exposed": true
                    },
                    {
                        "id": "channels",
                        "type": "string?",
                        "label": "Channels",
                        "doc": "Space-delimited list of channels. If not provided, default channel 0 will be used.",
                        "sbg:x": -511.822998046875,
                        "sbg:y": 136.93804931640625
                    },
                    {
                        "id": "in_mask",
                        "sbg:fileTypes": "TIF, TIFF",
                        "type": "File?",
                        "label": "Mask",
                        "sbg:x": -463.8625793457031,
                        "sbg:y": -372.7202453613281
                    },
                    {
                        "id": "is_tma",
                        "type": "boolean?",
                        "label": "Is TMA",
                        "doc": "Check this option if working with TMA (tissue microscopy) images. By default, it is expected that images are WSI, not TMA.",
                        "sbg:x": -84,
                        "sbg:y": -518
                    },
                    {
                        "id": "in_marker",
                        "sbg:fileTypes": "CSV",
                        "type": "File?",
                        "label": "Channel marker file",
                        "doc": "CSV file containing the channel names for the z-stack",
                        "sbg:x": 992.4254760742188,
                        "sbg:y": -703.3936157226562
                    }
                ],
                "outputs": [
                    {
                        "id": "out_image",
                        "outputSource": [
                            "mcmicro_cellpose/out_image",
                            "mcmicro_ws_ilastik/segmasks",
                            "mcmicro_ws_cypository/segmasks",
                            "mcmicro_ws_unmcist/segmasks"
                        ],
                        "sbg:fileTypes": "tif, tiff, TIF, TIFF",
                        "type": "File[]?",
                        "label": "Segmented Images",
                        "sbg:x": 1602.2978515625,
                        "sbg:y": 7.0691328048706055
                    },
                    {
                        "id": "out_tables",
                        "outputSource": [
                            "mcmicro_quantification/out_tables"
                        ],
                        "sbg:fileTypes": "CSV, JSON",
                        "type": "File[]?",
                        "label": "Quantification tables",
                        "sbg:x": 2024.9879150390625,
                        "sbg:y": -354.2232360839844
                    }
                ],
                "steps": [
                    {
                        "id": "mcmicro_recyze",
                        "in": [
                            {
                                "id": "in_image",
                                "source": "in_image"
                            },
                            {
                                "id": "channels",
                                "source": "channels"
                            },
                            {
                                "id": "skip_recyze",
                                "source": "skip_recyze"
                            }
                        ],
                        "out": [
                            {
                                "id": "out_recyze_image"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-recyze/3",
                            "baseCommand": [
                                "python",
                                "recyze.py"
                            ],
                            "inputs": [
                                {
                                    "id": "in_image",
                                    "type": "File",
                                    "inputBinding": {
                                        "prefix": "--in",
                                        "shellQuote": false,
                                        "position": 0
                                    }
                                },
                                {
                                    "id": "out_name",
                                    "type": "string?",
                                    "inputBinding": {
                                        "prefix": "--out",
                                        "shellQuote": false,
                                        "position": 0,
                                        "valueFrom": "${\n    if(!self)\n    {\n        return inputs.in_image.nameroot + '.recyzed' + inputs.in_image.nameext\n    }\n    else\n        return self\n}"
                                    },
                                    "label": "Output name",
                                    "doc": "Name of the output file. If not provided, it will be built upon input name."
                                },
                                {
                                    "id": "x",
                                    "type": "int?",
                                    "inputBinding": {
                                        "prefix": "--x",
                                        "shellQuote": false,
                                        "position": 4
                                    },
                                    "label": "Crop X1"
                                },
                                {
                                    "id": "x2",
                                    "type": "int?",
                                    "inputBinding": {
                                        "prefix": "--x2",
                                        "shellQuote": false,
                                        "position": 5
                                    },
                                    "label": "Crop X2"
                                },
                                {
                                    "id": "y",
                                    "type": "int?",
                                    "inputBinding": {
                                        "prefix": "--y",
                                        "shellQuote": false,
                                        "position": 6
                                    },
                                    "label": "Crop Y"
                                },
                                {
                                    "id": "y2",
                                    "type": "int?",
                                    "inputBinding": {
                                        "prefix": "--y2",
                                        "shellQuote": false,
                                        "position": 7
                                    },
                                    "label": "Crop Y2"
                                },
                                {
                                    "id": "w",
                                    "type": "int?",
                                    "inputBinding": {
                                        "prefix": "--w",
                                        "shellQuote": false,
                                        "position": 8
                                    },
                                    "label": "Crop width"
                                },
                                {
                                    "id": "h",
                                    "type": "int?",
                                    "inputBinding": {
                                        "prefix": "--h",
                                        "shellQuote": false,
                                        "position": 8
                                    },
                                    "label": "Crop height"
                                },
                                {
                                    "sbg:category": "General",
                                    "id": "channels",
                                    "type": "string?",
                                    "inputBinding": {
                                        "prefix": "--channels",
                                        "itemSeparator": " ",
                                        "shellQuote": false,
                                        "position": 0,
                                        "valueFrom": "${\n    if(!self)\n        return \"0\"\n    else\n        return self\n}"
                                    },
                                    "label": "Channels",
                                    "doc": "Space-delimited list of channels. If not provided, default channel 0 will be used."
                                },
                                {
                                    "id": "skip_recyze",
                                    "type": "boolean?",
                                    "label": "Skip recyze",
                                    "doc": "If this flag is turned one. No image modification will be done, and the input file will be propagated to the output",
                                    "default": false
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "out_recyze_image",
                                    "label": "Recyzed image",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "${\n    if(inputs.skip_recyze)\n        return null\n    else\n        return '*'\n}",
                                        "outputEval": "${\n    if(inputs.skip_recyze)\n    {\n        return inputs.in_image\n    }\n    else\n    {\n        return inheritMetadata(self, inputs.in_image)\n    }\n}"
                                    }
                                }
                            ],
                            "doc": "**MCMICRO - Recyze** performs image transformation of given images. Transformations include scaling and cropping. This tool is designed to work with TIF files, specifically on TMA cores or WSI images.\n\n### SBG Modifications\n* Channels are provided as a string instead of as a list of inputs to simplify inputs and to enable easier sharing of channel information across MCMICRO pipeline.\n* Parameter skip_recyze has been added to enable skipping this step in the MCMICRO pipeline.",
                            "label": "MCMICRO - Recyze",
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "labsyspharm/roadie:2022-10-20"
                                },
                                {
                                    "class": "InitialWorkDirRequirement",
                                    "listing": [
                                        {
                                            "entryname": "recyze.py",
                                            "entry": "import math\nimport sys\nimport tifffile\nimport zarr\nimport numpy as np\nfrom ome_types import from_tiff, to_xml\nfrom pathlib import Path\nimport argparse\nimport os\n\n\nclass PyramidWriter:\n\n    def __init__(\n            self, _in_path, _out_path, _channels, _x, _y, _x2, _y2, _w, _h, scale=2, tile_size=1024, peak_size=1024,\n            verbose=False\n    ):\n        if tile_size % 16 != 0:\n            raise ValueError(\"tile_size must be a multiple of 16\")\n        self.in_path = Path(_in_path)\n        self.in_tiff = tifffile.TiffFile(self.in_path, is_ome=False)\n        self.in_data = zarr.open(self.in_tiff.series[0].aszarr())\n        self.out_path = Path(_out_path)\n        self.metadata = from_tiff(self.in_path)\n\n        self.tile_size = tile_size\n        self.peak_size = peak_size\n        self.scale = scale\n        if self.in_data[0].ndim == 3:  # Multi-channel image\n            self.single_channel = False\n            if _channels:\n                if max(_channels) > self.in_data[0].shape[0]:\n                    print(\"Channel out of range\", file=sys.stderr)\n                    sys.exit(1)\n                else:\n                    self.channels = _channels\n            else:\n                self.channels = np.arange(self.in_data[0].shape[0], dtype=int).tolist()\n        else:  # Single Channel image\n            self.single_channel = True\n            if _channels and max(_channels) > 0:\n                print(\"Channel out of range\", file=sys.stderr)\n                sys.exit(1)\n            self.channels = [0]\n\n        xy = _x is not None and _y is not None\n        xy2 = _x2 is not None and _y2 is not None\n        wh = _w is not None and _h is not None\n        if all(v is None for v in (_x, _y, _x2, _y2, _w, _h)):\n            _w = self.in_data[0].shape[-1]\n            _h = self.in_data[0].shape[-2]\n            _x = _y = 0\n        elif not xy or not (wh ^ xy2):\n            print(\"Please specify x/y and either x2/y2 or w/h\", file=sys.stderr)\n            sys.exit(1)\n        elif xy2:\n            _w = _x2 - _x\n            _h = _y2 - _y\n\n        self.num_levels = math.ceil(math.log((max([_h, _w]) / self.peak_size), self.scale)) + 1\n\n        rounded_x = np.floor(_x / (self.scale ** (self.num_levels - 1))).astype(int) * (2 ** (self.num_levels - 1))\n        self.x = max([rounded_x, 0])\n\n        rounded_y = np.floor(_y / (self.scale ** (self.num_levels - 1))).astype(int) * (2 ** (self.num_levels - 1))\n        self.y = max([rounded_y, 0])\n\n        rounded_width = np.ceil((_w + self.x) / (self.scale ** (self.num_levels - 1))).astype(int) * \\\n                        (2 ** (self.num_levels - 1)) - self.x\n        self.width = min([rounded_width, self.in_data[0].shape[-1]])\n\n        rounded_height = np.ceil((_h + self.y) / (self.scale ** (self.num_levels - 1))).astype(\n            int) * (2 ** (self.num_levels - 1)) - self.y\n        self.height = min([rounded_height, self.in_data[0].shape[-2]])\n\n        print('Params:', 'x', self.x, 'y', self.y, 'height', self.height, 'width', self.width, 'levels',\n              self.num_levels,\n              'channels', self.channels)\n\n        self.verbose = verbose\n\n    @property\n    def base_shape(self):\n        \"Shape of the base level.\"\n        return [self.height, self.width]\n\n    @property\n    def num_channels(self):\n        return len(self.channels)\n\n    @property\n    def level_shapes(self):\n        \"Shape of all levels.\"\n        factors = self.scale ** np.arange(self.num_levels)\n        shapes = np.ceil(np.array(self.base_shape) / factors[:, None])\n        return [tuple(map(int, s)) for s in shapes]\n\n    @property\n    def level_full_shapes(self):\n        \"Shape of all levels, including channel dimension.\"\n        return [(self.num_channels, *shape) for shape in self.level_shapes]\n\n    @property\n    def tile_shapes(self):\n        \"Tile shape of all levels.\"\n        level_shapes = np.array(self.level_shapes)\n        # The last level where we want to use the standard square tile size.\n        tip_level = np.argmax(np.all(level_shapes < self.tile_size, axis=1))\n        tile_shapes = [\n            (self.tile_size, self.tile_size) if i <= tip_level else None\n            for i in range(len(level_shapes))\n        ]\n        # Remove NONE from list\n\n        return tile_shapes\n\n    def base_tiles(self):\n        h, w = self.base_shape\n        th, tw = self.tile_shapes[0]\n\n        for ci in self.channels:\n            if self.verbose:\n                print(f\"    Channel {ci}:\")\n            if self.single_channel:\n                img = self.in_data[0][self.y:self.y + self.height, self.x:self.x + self.width]\n            else:\n                img = self.in_data[0][ci, self.y:self.y + self.height, self.x:self.x + self.width]\n            print('Shape', img.shape)\n            for y in range(0, h, th):\n                for x in range(0, w, tw):\n                    # Returning a copy makes the array contiguous, avoiding\n                    # a severely unoptimized code path in ndarray.tofile.\n                    yield img[y:y + th, x:x + tw].copy()\n            # Allow img to be freed immediately to avoid keeping it in\n            # memory while the next loop iteration calls assemble_channel.\n            img = None\n\n    def cropped_subres_image(self, base_img, level):\n        scale = 2 ** level\n        subres_x1 = int(self.x / scale)\n        subres_y1 = int(self.y / scale)\n        subres_width = int(self.width / scale)\n        subres_height = int(self.height / scale)\n        subres_x2 = min([subres_x1 + subres_width, base_img.shape[-1]])\n        subres_y2 = min([subres_y1 + subres_height, base_img.shape[-2]])\n        return base_img[subres_y1:subres_y2, subres_x1:subres_x2]\n\n    def subres_tiles(self, level):\n        print(level, 'level')\n        assert level >= 1\n        num_channels, h, w = self.level_full_shapes[level]\n        tshape = self.tile_shapes[level] or (h, w)\n\n        for c in self.channels:\n            if self.single_channel:\n                base_img = self.in_data[level]\n            else:\n                base_img = self.in_data[level][c]\n            img = self.cropped_subres_image(base_img, level)\n            if self.verbose:\n                sys.stdout.write(\n                    f\"\\r        processing channel {c + 1}/{num_channels}\"\n                )\n                sys.stdout.flush()\n            th = tshape[0]\n            tw = tshape[1]\n            for y in range(0, img.shape[0], th):\n                for x in range(0, img.shape[1], tw):\n                    a = img[y:y + th, x:x + tw]\n                    a = a.astype(img.dtype)\n                    yield a\n\n    def run(self):\n        dtype = self.in_data[0].dtype\n        with tifffile.TiffWriter(self.out_path, ome=True, bigtiff=True) as tiff:\n            tiff.write(\n                data=self.base_tiles(),\n                software=self.in_tiff.pages[0].software,\n                shape=self.level_full_shapes[0],\n                subifds=int(self.num_levels - 1),\n                dtype=self.in_tiff.pages[0].dtype,\n                resolution=(\n                    self.in_tiff.pages[0].tags[\"XResolution\"].value,\n                    self.in_tiff.pages[0].tags[\"YResolution\"].value,\n                    self.in_tiff.pages[0].tags[\"ResolutionUnit\"].value),\n                tile=self.tile_shapes[0],\n                photometric=self.in_tiff.pages[0].photometric,\n            )\n            if self.verbose:\n                print(\"Generating pyramid\")\n            for level, (shape, tile_shape) in enumerate(\n                    zip(self.level_full_shapes[1:], self.tile_shapes[1:]), 1\n            ):\n                if self.verbose:\n                    print(f\"    Level {level} ({shape[2]} x {shape[1]})\")\n                tiff.write(\n                    data=self.subres_tiles(level),\n                    shape=shape,\n                    subfiletype=1,\n                    dtype=dtype,\n                    tile=tile_shape,\n                )\n                if self.verbose:\n                    print()\n            self.metadata.images[0].pixels.channels = [self.metadata.images[0].pixels.channels[i] for i in\n                                                       self.channels]\n            self.metadata.images[0].pixels.size_c = self.num_channels\n            self.metadata.images[0].pixels.size_x = self.width\n            self.metadata.images[0].pixels.size_y = self.height\n            if self.metadata.images[0].pixels.planes:\n                temp_planes = []\n                for i, channel_id in enumerate(self.channels):\n                    temp_plane = self.metadata.images[0].pixels.planes[channel_id]\n                    temp_plane.the_c = i\n                    temp_planes.append(temp_plane)\n                self.metadata.images[0].pixels.planes = temp_planes\n            if self.metadata.images[0].pixels.tiff_data_blocks and len(\n                    self.metadata.images[0].pixels.tiff_data_blocks) > 0:\n                self.metadata.images[0].pixels.tiff_data_blocks[0].plane_count = self.num_channels\n\n            # Write\n        tifffile.tiffcomment(self.out_path, to_xml(self.metadata))\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--in', type=str, required=True, help=\"Input Image Path\")\n    parser.add_argument('--out', type=str, required=False, help=\"Output Image Path\")\n    parser.add_argument('--x', type=int, required=False, default=None, help=\"Crop X1\")\n    parser.add_argument('--x2', type=int, required=False, default=None, help=\"Crop X2\")\n    parser.add_argument('--y', type=int, required=False, default=None, help=\"Crop Y1\")\n    parser.add_argument('--y2', type=int, required=False, default=None, help=\"Crop Y2\")\n    parser.add_argument('--w', type=int, required=False, default=None, help=\"Crop Width\")\n    parser.add_argument('--h', type=int, required=False, default=None, help=\"Crop Height\")\n    parser.add_argument('--channels', type=int, nargs=\"+\", required=False, default=None, help=\"Channels\")\n    argument = parser.parse_args()\n\n    # Automatically infer the output filename, if not specified\n    in_path = vars(argument)['in']\n    out_path = argument.out\n    if out_path is None:\n\n        # Tokenize the input filename and insert \"_crop\"\n        #   at the appropriate location\n        tokens = os.path.basename(in_path).split(os.extsep)\n        if len(tokens) < 2:\n            out_path = in_path + \"_crop\"\n        elif tokens[-2] == \"ome\":\n            stem = os.extsep.join(tokens[0:-2]) + \"_crop\"\n            out_path = os.extsep.join([stem] + tokens[-2:])\n        else:\n            stem = os.extsep.join(tokens[0:-1]) + \"_crop\"\n            out_path = os.extsep.join([stem, tokens[-1]])\n\n    writer = PyramidWriter(in_path, out_path, argument.channels, argument.x, argument.y,\n                           argument.x2, argument.y2, argument.w, argument.h)\n    writer.run()",
                                            "writable": false
                                        }
                                    ]
                                },
                                {
                                    "class": "InlineJavascriptRequirement",
                                    "expressionLib": [
                                        "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!o2) {\n        return o1;\n    };\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n        for (var key in commonMetadata) {\n            if (!(key in example)) {\n                delete commonMetadata[key]\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n        if (o1.secondaryFiles) {\n            o1.secondaryFiles = inheritMetadata(o1.secondaryFiles, o2)\n        }\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n            if (o1[i].secondaryFiles) {\n                o1[i].secondaryFiles = inheritMetadata(o1[i].secondaryFiles, o2)\n            }\n        }\n    }\n    return o1;\n};"
                                    ]
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1669980847,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1670518001,
                                    "sbg:revisionNotes": "Initial version"
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675698713,
                                    "sbg:revisionNotes": "Add option for step skipping"
                                },
                                {
                                    "sbg:revision": 3,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675699146,
                                    "sbg:revisionNotes": "Better channel logic"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-5e9af84d/h-129157a3/h-2830fb33/0",
                            "sbg:revision": 3,
                            "sbg:revisionNotes": "Better channel logic",
                            "sbg:modifiedOn": 1675699146,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1669980847,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 3,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a0c56ba50350312397ff408833b94d9875b68a326a1d3ef6aa321d352c883136a",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - Recyze",
                        "sbg:x": -332.28558349609375,
                        "sbg:y": -101.42884826660156,
                        "when": "$(!inputs.skip_recyze)"
                    },
                    {
                        "id": "mcmicro_segmentation",
                        "in": [
                            {
                                "id": "in_image",
                                "source": [
                                    "mcmicro_recyze/out_recyze_image",
                                    "in_image"
                                ],
                                "pickValue": "first_non_null"
                            }
                        ],
                        "out": [
                            {
                                "id": "out_image"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-segmentation/2",
                            "baseCommand": [
                                "python",
                                "/app/unmicstWrapper.py",
                                "--stackOutput",
                                "--outputPath",
                                "."
                            ],
                            "inputs": [
                                {
                                    "id": "in_image",
                                    "type": "File?",
                                    "inputBinding": {
                                        "shellQuote": false,
                                        "position": 0
                                    },
                                    "label": "Image File",
                                    "sbg:fileTypes": "TIF, TIFF, tif, tiff"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "out_image",
                                    "label": "Segmented Image",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "*.{tif,tiff}",
                                        "outputEval": "$(inheritMetadata(self, inputs.in_image))"
                                    },
                                    "sbg:fileTypes": "tif, tiff, TIF, TIFF"
                                }
                            ],
                            "label": "MCMICRO - UnMICST Segmentation",
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "labsyspharm/unmicst"
                                },
                                {
                                    "class": "InlineJavascriptRequirement",
                                    "expressionLib": [
                                        "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!o2) {\n        return o1;\n    };\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n        for (var key in commonMetadata) {\n            if (!(key in example)) {\n                delete commonMetadata[key]\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n        if (o1.secondaryFiles) {\n            o1.secondaryFiles = inheritMetadata(o1.secondaryFiles, o2)\n        }\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n            if (o1[i].secondaryFiles) {\n                o1[i].secondaryFiles = inheritMetadata(o1[i].secondaryFiles, o2)\n            }\n        }\n    }\n    return o1;\n};"
                                    ]
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1669653038,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671121566,
                                    "sbg:revisionNotes": "Initial revision"
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671121593,
                                    "sbg:revisionNotes": "Change name to reflect specific segmentation algorithm"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-4cdb1347/h-89a2746b/h-11bdef7c/0",
                            "sbg:revision": 2,
                            "sbg:revisionNotes": "Change name to reflect specific segmentation algorithm",
                            "sbg:modifiedOn": 1671121593,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1669653038,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 2,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a252c9886ba22d11f457027900fe9311f29e93a3572777dca297386857b0d93a6",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - UnMICST Segmentation",
                        "sbg:x": 212,
                        "sbg:y": -297.001953125
                    },
                    {
                        "id": "mcmicro_cypository",
                        "in": [
                            {
                                "id": "in_image",
                                "source": [
                                    "mcmicro_recyze/out_recyze_image",
                                    "in_image"
                                ],
                                "pickValue": "first_non_null"
                            },
                            {
                                "id": "model",
                                "default": "zeisscyto"
                            },
                            {
                                "id": "segmentation_channels",
                                "source": "channels"
                            }
                        ],
                        "out": [
                            {
                                "id": "out_image"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-cypository/4",
                            "baseCommand": [
                                "python",
                                "/app/deployMaskRCNN.py",
                                "--stackOutput",
                                "--outputPath",
                                "."
                            ],
                            "inputs": [
                                {
                                    "id": "in_image",
                                    "type": "File?",
                                    "inputBinding": {
                                        "shellQuote": false,
                                        "position": 0
                                    },
                                    "label": "Image File",
                                    "sbg:fileTypes": "TIF, TIFF, tif, tiff"
                                },
                                {
                                    "id": "model",
                                    "type": [
                                        "null",
                                        {
                                            "type": "enum",
                                            "symbols": [
                                                "zeisscyto"
                                            ],
                                            "name": "model"
                                        }
                                    ],
                                    "inputBinding": {
                                        "prefix": "--model",
                                        "shellQuote": false,
                                        "position": 2
                                    },
                                    "label": "Model",
                                    "doc": "Currently only one model exists (zeisscyto). But this is wrapped to future proof it. The only model is used as default, there is no need to set this parameter at the moment.",
                                    "default": "zeisscyto"
                                },
                                {
                                    "id": "segmentation_channels",
                                    "type": "string?",
                                    "inputBinding": {
                                        "prefix": "--channel",
                                        "shellQuote": false,
                                        "position": 0
                                    },
                                    "label": "Channels",
                                    "doc": "Channel(s) to perform inference on. If there are multiple channels, separate them by whitespace.",
                                    "default": "1"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "out_image",
                                    "label": "Segmented Image",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "*.{tif,tiff}",
                                        "outputEval": "$(inheritMetadata(self, inputs.in_image))"
                                    },
                                    "sbg:fileTypes": "tif, tiff, TIF, TIFF"
                                }
                            ],
                            "label": "MCMICRO - Cypository Segmentation",
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "labsyspharm/cypository:1.1.5"
                                },
                                {
                                    "class": "InlineJavascriptRequirement",
                                    "expressionLib": [
                                        "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!o2) {\n        return o1;\n    };\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n        for (var key in commonMetadata) {\n            if (!(key in example)) {\n                delete commonMetadata[key]\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n        if (o1.secondaryFiles) {\n            o1.secondaryFiles = inheritMetadata(o1.secondaryFiles, o2)\n        }\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n            if (o1[i].secondaryFiles) {\n                o1[i].secondaryFiles = inheritMetadata(o1[i].secondaryFiles, o2)\n            }\n        }\n    }\n    return o1;\n};"
                                    ]
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671535292,
                                    "sbg:revisionNotes": "Copy of boris_majic/mcmicro-dev/mcmicro-segmentation/2"
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671535460,
                                    "sbg:revisionNotes": "Initial revision"
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675504318,
                                    "sbg:revisionNotes": "Add model"
                                },
                                {
                                    "sbg:revision": 3,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675505062,
                                    "sbg:revisionNotes": "Add support for channel specification"
                                },
                                {
                                    "sbg:revision": 4,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675759940,
                                    "sbg:revisionNotes": "Debug channel"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-5cdf0baa/h-e42d9361/h-511b5b2f/0",
                            "sbg:revision": 4,
                            "sbg:revisionNotes": "Debug channel",
                            "sbg:modifiedOn": 1675759940,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1671535292,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 4,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a77c220447befd53044f4f8c382d01813567ee506d7691b71e84d3e6f2b170b3a",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - Cypository Segmentation",
                        "sbg:x": 217,
                        "sbg:y": -155
                    },
                    {
                        "id": "mcmicro_ilastik",
                        "in": [
                            {
                                "id": "in_image",
                                "source": [
                                    "mcmicro_recyze/out_recyze_image",
                                    "in_image"
                                ],
                                "pickValue": "first_non_null"
                            },
                            {
                                "id": "num_channels",
                                "default": 1
                            },
                            {
                                "id": "channelIDs",
                                "source": "channels"
                            }
                        ],
                        "out": [
                            {
                                "id": "out_image"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-ilastik/3",
                            "baseCommand": [
                                "python",
                                "/app/mc-ilastik.py",
                                "--output",
                                "."
                            ],
                            "inputs": [
                                {
                                    "id": "in_image",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--input",
                                        "shellQuote": false,
                                        "position": 0
                                    },
                                    "label": "Image File",
                                    "sbg:fileTypes": "TIF, TIFF, tif, tiff"
                                },
                                {
                                    "id": "num_channels",
                                    "type": "int?",
                                    "inputBinding": {
                                        "prefix": "--num_channels",
                                        "shellQuote": false,
                                        "position": 4
                                    },
                                    "label": "Number of channels",
                                    "doc": "If channel IDs are not specified, channels in range(0,num_channels) are used."
                                },
                                {
                                    "id": "channelIDs",
                                    "type": "string?",
                                    "inputBinding": {
                                        "prefix": "--channelIDs",
                                        "shellQuote": false,
                                        "position": 5
                                    },
                                    "label": "Channels to use",
                                    "doc": "List of 0-indexed channels to use."
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "out_image",
                                    "label": "Segmented Image",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "*.{tif,tiff}",
                                        "outputEval": "$(inheritMetadata(self, inputs.in_image))"
                                    },
                                    "sbg:fileTypes": "tif, tiff, TIF, TIFF"
                                }
                            ],
                            "label": "MCMICRO - Ilastik",
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "labsyspharm/mcmicro-ilastik:1.5.1"
                                },
                                {
                                    "class": "InlineJavascriptRequirement",
                                    "expressionLib": [
                                        "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!o2) {\n        return o1;\n    };\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n        for (var key in commonMetadata) {\n            if (!(key in example)) {\n                delete commonMetadata[key]\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n        if (o1.secondaryFiles) {\n            o1.secondaryFiles = inheritMetadata(o1.secondaryFiles, o2)\n        }\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n            if (o1[i].secondaryFiles) {\n                o1[i].secondaryFiles = inheritMetadata(o1[i].secondaryFiles, o2)\n            }\n        }\n    }\n    return o1;\n};"
                                    ]
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671535565,
                                    "sbg:revisionNotes": "Copy of boris_majic/mcmicro-dev/mcmicro-cypository/1"
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671535869,
                                    "sbg:revisionNotes": "Try this first"
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671535900,
                                    "sbg:revisionNotes": "Try this first"
                                },
                                {
                                    "sbg:revision": 3,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675506942,
                                    "sbg:revisionNotes": "Add channel logic"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-4a98dcde/h-6898cbfb/h-17e33ba7/0",
                            "sbg:revision": 3,
                            "sbg:revisionNotes": "Add channel logic",
                            "sbg:modifiedOn": 1675506942,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1671535565,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 3,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a5c531f8dedb108980329bfed0cf1ad0d947eac2d7e446e26e2356b1664f1cead",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - Ilastik",
                        "sbg:x": 221,
                        "sbg:y": -13
                    },
                    {
                        "id": "mcmicro_cellpose",
                        "in": [
                            {
                                "id": "in_image",
                                "source": [
                                    "mcmicro_recyze/out_recyze_image",
                                    "in_image"
                                ],
                                "pickValue": "first_non_null"
                            }
                        ],
                        "out": [
                            {
                                "id": "out_image"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-cellpose/1",
                            "baseCommand": [
                                "cellpose",
                                "--channel_axis",
                                "0",
                                "--save_tif",
                                "--savedir",
                                "."
                            ],
                            "inputs": [
                                {
                                    "id": "in_image",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--image_path",
                                        "shellQuote": false,
                                        "position": 0
                                    },
                                    "label": "Image File",
                                    "sbg:fileTypes": "TIF, TIFF, tif, tiff"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "out_image",
                                    "label": "Segmented Image",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "*.{tif,tiff}",
                                        "outputEval": "$(inheritMetadata(self, inputs.in_image))"
                                    },
                                    "sbg:fileTypes": "tif, tiff, TIF, TIFF"
                                }
                            ],
                            "label": "MCMICRO - Cellpose",
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "niksto/cellpose_for_mcmicro:latest"
                                },
                                {
                                    "class": "InlineJavascriptRequirement",
                                    "expressionLib": [
                                        "\nvar setMetadata = function(file, metadata) {\n    if (!('metadata' in file)) {\n        file['metadata'] = {}\n    }\n    for (var key in metadata) {\n        file['metadata'][key] = metadata[key];\n    }\n    return file\n};\nvar inheritMetadata = function(o1, o2) {\n    var commonMetadata = {};\n    if (!o2) {\n        return o1;\n    };\n    if (!Array.isArray(o2)) {\n        o2 = [o2]\n    }\n    for (var i = 0; i < o2.length; i++) {\n        var example = o2[i]['metadata'];\n        for (var key in example) {\n            if (i == 0)\n                commonMetadata[key] = example[key];\n            else {\n                if (!(commonMetadata[key] == example[key])) {\n                    delete commonMetadata[key]\n                }\n            }\n        }\n        for (var key in commonMetadata) {\n            if (!(key in example)) {\n                delete commonMetadata[key]\n            }\n        }\n    }\n    if (!Array.isArray(o1)) {\n        o1 = setMetadata(o1, commonMetadata)\n        if (o1.secondaryFiles) {\n            o1.secondaryFiles = inheritMetadata(o1.secondaryFiles, o2)\n        }\n    } else {\n        for (var i = 0; i < o1.length; i++) {\n            o1[i] = setMetadata(o1[i], commonMetadata)\n            if (o1[i].secondaryFiles) {\n                o1[i].secondaryFiles = inheritMetadata(o1[i].secondaryFiles, o2)\n            }\n        }\n    }\n    return o1;\n};"
                                    ]
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671802948,
                                    "sbg:revisionNotes": "Copy of boris_majic/mcmicro-dev/mcmicro-mesmer/1"
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671803055,
                                    "sbg:revisionNotes": "Initial version"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-d67bdc10/h-b9755d9c/h-131d762d/0",
                            "sbg:revision": 1,
                            "sbg:revisionNotes": "Initial version",
                            "sbg:modifiedOn": 1671803055,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1671802948,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 1,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a4f1ae01a84010c34da6346d6db044eb9a43c421a0f172bccb2e9bf9d8f4e642b",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - Cellpose",
                        "sbg:x": 253.02659606933594,
                        "sbg:y": 327.2393493652344
                    },
                    {
                        "id": "mcmicro_ws_unmcist",
                        "in": [
                            {
                                "id": "is_tma",
                                "source": "is_tma"
                            },
                            {
                                "id": "in_mask",
                                "source": "in_mask"
                            },
                            {
                                "id": "in_image",
                                "source": [
                                    "mcmicro_recyze/out_recyze_image",
                                    "in_image"
                                ],
                                "pickValue": "first_non_null"
                            },
                            {
                                "id": "in_probmap",
                                "source": "mcmicro_segmentation/out_image"
                            },
                            {
                                "id": "idxbase",
                                "default": "1"
                            },
                            {
                                "id": "segmentation-channels",
                                "source": "channels"
                            }
                        ],
                        "out": [
                            {
                                "id": "segmasks"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-watershed/4",
                            "baseCommand": [
                                "python",
                                "/app/S3segmenter.py"
                            ],
                            "inputs": [
                                {
                                    "sbg:category": "General",
                                    "sbg:toolDefaultValue": "False",
                                    "id": "is_tma",
                                    "type": "boolean?",
                                    "label": "Is TMA",
                                    "doc": "Check this option if working with TMA (tissue microscopy) images. By default, it is expected that images are WSI, not TMA."
                                },
                                {
                                    "id": "in_mask",
                                    "type": "File?",
                                    "label": "Mask",
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "id": "in_image",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--imagePath",
                                        "shellQuote": false,
                                        "position": 5
                                    },
                                    "label": "Core image",
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "id": "in_probmap",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--stackProbPath",
                                        "shellQuote": false,
                                        "position": 10
                                    },
                                    "label": "Probability map",
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "sbg:toolDefaultValue": "watershedContourInt",
                                    "id": "nuclei_region",
                                    "type": "string?",
                                    "inputBinding": {
                                        "prefix": "--nucleiRegion",
                                        "shellQuote": false,
                                        "position": 15
                                    },
                                    "label": "Nuclei Region",
                                    "doc": "Default: watershedContourInt.\nChoices: watershedContourDist, watershedContourInt, watershedBWDist, \ndilation, localThreshold, localMax, bypass, pixellevel"
                                },
                                {
                                    "sbg:category": "Channels",
                                    "id": "idxbase",
                                    "type": [
                                        "null",
                                        {
                                            "type": "enum",
                                            "symbols": [
                                                "0",
                                                "1"
                                            ],
                                            "name": "idxbase"
                                        }
                                    ],
                                    "label": "Index base",
                                    "doc": "Index base for segmentation channels",
                                    "default": "1"
                                },
                                {
                                    "sbg:category": "Channels",
                                    "id": "segmentation-channels",
                                    "type": "string?",
                                    "label": "Segmentation channels",
                                    "doc": "String of whitespace-delimited segmentation channels"
                                },
                                {
                                    "id": "segmentation-recyze",
                                    "type": "boolean?",
                                    "label": "Segmentation recyze",
                                    "doc": "Was segmentation recyze ran previously in the worfklow?",
                                    "default": null
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "segmasks",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "*/*.ome.tif"
                                    }
                                }
                            ],
                            "label": "MCMICRO - Watershed",
                            "arguments": [
                                {
                                    "prefix": "",
                                    "shellQuote": false,
                                    "position": 0,
                                    "valueFrom": "${\n    var cmd = '';\n    if(inputs.is_tma)\n    {\n        cmd = cmd + '--crop dearray --maskPath ' + inputs.in_mask.path\n    }\n    return cmd\n}"
                                },
                                {
                                    "prefix": "",
                                    "shellQuote": false,
                                    "position": 20,
                                    "valueFrom": "--outputPath ."
                                }
                            ],
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "labsyspharm/s3segmenter:1.5.1"
                                },
                                {
                                    "class": "InlineJavascriptRequirement"
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671803120,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675184178,
                                    "sbg:revisionNotes": "Initial revision"
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675503332,
                                    "sbg:revisionNotes": "Add segmentation channel logic"
                                },
                                {
                                    "sbg:revision": 3,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675760578,
                                    "sbg:revisionNotes": "Add output path"
                                },
                                {
                                    "sbg:revision": 4,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675761455,
                                    "sbg:revisionNotes": "Try newer image"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-2b408eda/h-f00c342b/h-583ca75b/0",
                            "sbg:revision": 4,
                            "sbg:revisionNotes": "Try newer image",
                            "sbg:modifiedOn": 1675761455,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1671803120,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 4,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a6dd9aa2370d37c5c49c0bca04ec840a42b6981808f1a9fce6dc80e73d29eb7f5",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - Watershed - unmcist",
                        "sbg:x": 783.0177001953125,
                        "sbg:y": -562.035400390625
                    },
                    {
                        "id": "mcmicro_ws_cypository",
                        "in": [
                            {
                                "id": "is_tma",
                                "source": "is_tma"
                            },
                            {
                                "id": "in_mask",
                                "source": "in_mask"
                            },
                            {
                                "id": "in_image",
                                "source": [
                                    "mcmicro_recyze/out_recyze_image",
                                    "in_image"
                                ],
                                "pickValue": "first_non_null"
                            },
                            {
                                "id": "in_probmap",
                                "source": "mcmicro_cypository/out_image"
                            },
                            {
                                "id": "nuclei_region",
                                "default": "bypass"
                            },
                            {
                                "id": "idxbase",
                                "default": "1"
                            },
                            {
                                "id": "segmentation-channels",
                                "source": "channels"
                            }
                        ],
                        "out": [
                            {
                                "id": "segmasks"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-watershed/4",
                            "baseCommand": [
                                "python",
                                "/app/S3segmenter.py"
                            ],
                            "inputs": [
                                {
                                    "sbg:category": "General",
                                    "sbg:toolDefaultValue": "False",
                                    "id": "is_tma",
                                    "type": "boolean?",
                                    "label": "Is TMA",
                                    "doc": "Check this option if working with TMA (tissue microscopy) images. By default, it is expected that images are WSI, not TMA."
                                },
                                {
                                    "id": "in_mask",
                                    "type": "File?",
                                    "label": "Mask",
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "id": "in_image",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--imagePath",
                                        "shellQuote": false,
                                        "position": 5
                                    },
                                    "label": "Core image",
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "id": "in_probmap",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--stackProbPath",
                                        "shellQuote": false,
                                        "position": 10
                                    },
                                    "label": "Probability map",
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "sbg:toolDefaultValue": "watershedContourInt",
                                    "id": "nuclei_region",
                                    "type": "string?",
                                    "inputBinding": {
                                        "prefix": "--nucleiRegion",
                                        "shellQuote": false,
                                        "position": 15
                                    },
                                    "label": "Nuclei Region",
                                    "doc": "Default: watershedContourInt.\nChoices: watershedContourDist, watershedContourInt, watershedBWDist, \ndilation, localThreshold, localMax, bypass, pixellevel"
                                },
                                {
                                    "sbg:category": "Channels",
                                    "id": "idxbase",
                                    "type": [
                                        "null",
                                        {
                                            "type": "enum",
                                            "symbols": [
                                                "0",
                                                "1"
                                            ],
                                            "name": "idxbase"
                                        }
                                    ],
                                    "label": "Index base",
                                    "doc": "Index base for segmentation channels",
                                    "default": "1"
                                },
                                {
                                    "sbg:category": "Channels",
                                    "id": "segmentation-channels",
                                    "type": "string?",
                                    "label": "Segmentation channels",
                                    "doc": "String of whitespace-delimited segmentation channels"
                                },
                                {
                                    "id": "segmentation-recyze",
                                    "type": "boolean?",
                                    "label": "Segmentation recyze",
                                    "doc": "Was segmentation recyze ran previously in the worfklow?",
                                    "default": null
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "segmasks",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "*/*.ome.tif"
                                    }
                                }
                            ],
                            "label": "MCMICRO - Watershed",
                            "arguments": [
                                {
                                    "prefix": "",
                                    "shellQuote": false,
                                    "position": 0,
                                    "valueFrom": "${\n    var cmd = '';\n    if(inputs.is_tma)\n    {\n        cmd = cmd + '--crop dearray --maskPath ' + inputs.in_mask.path\n    }\n    return cmd\n}"
                                },
                                {
                                    "prefix": "",
                                    "shellQuote": false,
                                    "position": 20,
                                    "valueFrom": "--outputPath ."
                                }
                            ],
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "labsyspharm/s3segmenter:1.5.1"
                                },
                                {
                                    "class": "InlineJavascriptRequirement"
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671803120,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675184178,
                                    "sbg:revisionNotes": "Initial revision"
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675503332,
                                    "sbg:revisionNotes": "Add segmentation channel logic"
                                },
                                {
                                    "sbg:revision": 3,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675760578,
                                    "sbg:revisionNotes": "Add output path"
                                },
                                {
                                    "sbg:revision": 4,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675761455,
                                    "sbg:revisionNotes": "Try newer image"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-b546d4f4/h-b08458e1/h-9fc05fc5/0",
                            "sbg:revision": 4,
                            "sbg:revisionNotes": "Try newer image",
                            "sbg:modifiedOn": 1675761455,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1671803120,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 4,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a6dd9aa2370d37c5c49c0bca04ec840a42b6981808f1a9fce6dc80e73d29eb7f5",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - Watershed - Cypository",
                        "sbg:x": 839.7964477539062,
                        "sbg:y": -261.93804931640625
                    },
                    {
                        "id": "mcmicro_ws_ilastik",
                        "in": [
                            {
                                "id": "is_tma",
                                "source": "is_tma"
                            },
                            {
                                "id": "in_mask",
                                "source": "in_mask"
                            },
                            {
                                "id": "in_image",
                                "source": [
                                    "mcmicro_recyze/out_recyze_image",
                                    "in_image"
                                ],
                                "pickValue": "first_non_null"
                            },
                            {
                                "id": "in_probmap",
                                "source": "mcmicro_ilastik/out_image"
                            },
                            {
                                "id": "idxbase",
                                "default": "1"
                            },
                            {
                                "id": "segmentation-channels",
                                "source": "channels"
                            }
                        ],
                        "out": [
                            {
                                "id": "segmasks"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-watershed/4",
                            "baseCommand": [
                                "python",
                                "/app/S3segmenter.py"
                            ],
                            "inputs": [
                                {
                                    "sbg:category": "General",
                                    "sbg:toolDefaultValue": "False",
                                    "id": "is_tma",
                                    "type": "boolean?",
                                    "label": "Is TMA",
                                    "doc": "Check this option if working with TMA (tissue microscopy) images. By default, it is expected that images are WSI, not TMA."
                                },
                                {
                                    "id": "in_mask",
                                    "type": "File?",
                                    "label": "Mask",
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "id": "in_image",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--imagePath",
                                        "shellQuote": false,
                                        "position": 5
                                    },
                                    "label": "Core image",
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "id": "in_probmap",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--stackProbPath",
                                        "shellQuote": false,
                                        "position": 10
                                    },
                                    "label": "Probability map",
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "sbg:toolDefaultValue": "watershedContourInt",
                                    "id": "nuclei_region",
                                    "type": "string?",
                                    "inputBinding": {
                                        "prefix": "--nucleiRegion",
                                        "shellQuote": false,
                                        "position": 15
                                    },
                                    "label": "Nuclei Region",
                                    "doc": "Default: watershedContourInt.\nChoices: watershedContourDist, watershedContourInt, watershedBWDist, \ndilation, localThreshold, localMax, bypass, pixellevel"
                                },
                                {
                                    "sbg:category": "Channels",
                                    "id": "idxbase",
                                    "type": [
                                        "null",
                                        {
                                            "type": "enum",
                                            "symbols": [
                                                "0",
                                                "1"
                                            ],
                                            "name": "idxbase"
                                        }
                                    ],
                                    "label": "Index base",
                                    "doc": "Index base for segmentation channels",
                                    "default": "1"
                                },
                                {
                                    "sbg:category": "Channels",
                                    "id": "segmentation-channels",
                                    "type": "string?",
                                    "label": "Segmentation channels",
                                    "doc": "String of whitespace-delimited segmentation channels"
                                },
                                {
                                    "id": "segmentation-recyze",
                                    "type": "boolean?",
                                    "label": "Segmentation recyze",
                                    "doc": "Was segmentation recyze ran previously in the worfklow?",
                                    "default": null
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "segmasks",
                                    "type": "File[]?",
                                    "outputBinding": {
                                        "glob": "*/*.ome.tif"
                                    }
                                }
                            ],
                            "label": "MCMICRO - Watershed",
                            "arguments": [
                                {
                                    "prefix": "",
                                    "shellQuote": false,
                                    "position": 0,
                                    "valueFrom": "${\n    var cmd = '';\n    if(inputs.is_tma)\n    {\n        cmd = cmd + '--crop dearray --maskPath ' + inputs.in_mask.path\n    }\n    return cmd\n}"
                                },
                                {
                                    "prefix": "",
                                    "shellQuote": false,
                                    "position": 20,
                                    "valueFrom": "--outputPath ."
                                }
                            ],
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "labsyspharm/s3segmenter:1.5.1"
                                },
                                {
                                    "class": "InlineJavascriptRequirement"
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1671803120,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675184178,
                                    "sbg:revisionNotes": "Initial revision"
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675503332,
                                    "sbg:revisionNotes": "Add segmentation channel logic"
                                },
                                {
                                    "sbg:revision": 3,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675760578,
                                    "sbg:revisionNotes": "Add output path"
                                },
                                {
                                    "sbg:revision": 4,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675761455,
                                    "sbg:revisionNotes": "Try newer image"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-6492dc9d/h-f555ed10/h-b1c2c643/0",
                            "sbg:revision": 4,
                            "sbg:revisionNotes": "Try newer image",
                            "sbg:modifiedOn": 1675761455,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1671803120,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 4,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "a6dd9aa2370d37c5c49c0bca04ec840a42b6981808f1a9fce6dc80e73d29eb7f5",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - Watershed - Ilastik",
                        "sbg:x": 811.3717041015625,
                        "sbg:y": -22
                    },
                    {
                        "id": "mcmicro_quantification",
                        "in": [
                            {
                                "id": "in_image",
                                "source": [
                                    "mcmicro_recyze/out_recyze_image",
                                    "in_image"
                                ],
                                "pickValue": "first_non_null"
                            },
                            {
                                "id": "in_masks",
                                "source": [
                                    "mcmicro_ws_unmcist/segmasks",
                                    "mcmicro_ws_cypository/segmasks",
                                    "mcmicro_ws_ilastik/segmasks",
                                    "mcmicro_cellpose/out_image"
                                ]
                            },
                            {
                                "id": "in_marker",
                                "source": "in_marker"
                            }
                        ],
                        "out": [
                            {
                                "id": "out_tables"
                            }
                        ],
                        "run": {
                            "class": "CommandLineTool",
                            "cwlVersion": "v1.2",
                            "$namespaces": {
                                "sbg": "https://sevenbridges.com"
                            },
                            "id": "boris_majic/mcmicro-dev/mcmicro-quantification/2",
                            "baseCommand": [
                                "python",
                                "/app/CommandSingleCellExtraction.py"
                            ],
                            "inputs": [
                                {
                                    "id": "in_image",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--image",
                                        "shellQuote": false,
                                        "position": 0
                                    },
                                    "label": "Image file",
                                    "sbg:fileTypes": "TIF, TIFF, H5, HDF5"
                                },
                                {
                                    "id": "in_masks",
                                    "type": "File[]?",
                                    "inputBinding": {
                                        "prefix": "--masks",
                                        "shellQuote": false,
                                        "position": 1
                                    },
                                    "label": "Segmentation masks",
                                    "doc": "If multiple masks are selected the first mask will be used for spatial feature extraction but all will be quantified",
                                    "sbg:fileTypes": "TIF, TIFF"
                                },
                                {
                                    "id": "in_marker",
                                    "type": "File?",
                                    "inputBinding": {
                                        "prefix": "--channel_names",
                                        "shellQuote": false,
                                        "position": 2
                                    },
                                    "label": "Channel marker file",
                                    "doc": "CSV file containing the channel names for the z-stack",
                                    "sbg:fileTypes": "CSV"
                                }
                            ],
                            "outputs": [
                                {
                                    "id": "out_tables",
                                    "type": "File?",
                                    "outputBinding": {
                                        "glob": "*.csv"
                                    }
                                }
                            ],
                            "doc": "Module for single-cell data extraction given a segmentation mask and multi-channel image. The CSV structure is aligned with histoCAT output.",
                            "label": "MCMICRO - Quantification",
                            "arguments": [
                                {
                                    "prefix": "",
                                    "shellQuote": false,
                                    "position": 3,
                                    "valueFrom": "--output ."
                                }
                            ],
                            "requirements": [
                                {
                                    "class": "ShellCommandRequirement"
                                },
                                {
                                    "class": "DockerRequirement",
                                    "dockerPull": "labsyspharm/quantification:1.5.3"
                                }
                            ],
                            "sbg:projectName": "MCMICRO - DEV",
                            "sbg:revisionsInfo": [
                                {
                                    "sbg:revision": 0,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675701767,
                                    "sbg:revisionNotes": null
                                },
                                {
                                    "sbg:revision": 1,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675702521,
                                    "sbg:revisionNotes": "Initial revision"
                                },
                                {
                                    "sbg:revision": 2,
                                    "sbg:modifiedBy": "boris_majic",
                                    "sbg:modifiedOn": 1675707380,
                                    "sbg:revisionNotes": "Update to latest image"
                                }
                            ],
                            "sbg:image_url": null,
                            "sbg:appVersion": [
                                "v1.2"
                            ],
                            "sbg:id": "h-594b2696/h-71ffed86/h-e63f7b97/0",
                            "sbg:revision": 2,
                            "sbg:revisionNotes": "Update to latest image",
                            "sbg:modifiedOn": 1675707380,
                            "sbg:modifiedBy": "boris_majic",
                            "sbg:createdOn": 1675701767,
                            "sbg:createdBy": "boris_majic",
                            "sbg:project": "boris_majic/mcmicro-dev",
                            "sbg:sbgMaintained": false,
                            "sbg:validationErrors": [],
                            "sbg:contributors": [
                                "boris_majic"
                            ],
                            "sbg:latestRevision": 2,
                            "sbg:publisher": "sbg",
                            "sbg:content_hash": "ab25e7b28c780b2d509a1d0e2d4238f6ea59f954b43b18c352b6c3cb4bb7c135d",
                            "sbg:workflowLanguage": "CWL"
                        },
                        "label": "MCMICRO - Quantification",
                        "sbg:x": 1653.7178955078125,
                        "sbg:y": -355.7021179199219
                    }
                ],
                "requirements": [
                    {
                        "class": "MultipleInputFeatureRequirement"
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    },
                    {
                        "class": "StepInputExpressionRequirement"
                    }
                ],
                "sbg:projectName": "MCMICRO - DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675698759,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675700371,
                        "sbg:revisionNotes": "Segmentations"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675759180,
                        "sbg:revisionNotes": "Set recyze to conditional"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675759962,
                        "sbg:revisionNotes": "Debug cypository"
                    },
                    {
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675760650,
                        "sbg:revisionNotes": "Debug watershed"
                    },
                    {
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675761511,
                        "sbg:revisionNotes": "Update ws docker"
                    },
                    {
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675762884,
                        "sbg:revisionNotes": "Set ilastik channels"
                    },
                    {
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675769578,
                        "sbg:revisionNotes": "Add quantification"
                    }
                ],
                "sbg:image_url": "https://igor.sbgenomics.com/ns/brood/images/boris_majic/mcmicro-dev/mcmicro-segmentation-1/7.png",
                "sbg:appVersion": [
                    "v1.2"
                ],
                "sbg:id": "h-df492d46/h-855ebb30/h-1753bfa4/0",
                "sbg:revision": 7,
                "sbg:revisionNotes": "Add quantification",
                "sbg:modifiedOn": 1675769578,
                "sbg:modifiedBy": "boris_majic",
                "sbg:createdOn": 1675698759,
                "sbg:createdBy": "boris_majic",
                "sbg:project": "boris_majic/mcmicro-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "boris_majic"
                ],
                "sbg:latestRevision": 7,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "aeca1e7f75f296acccff39e9c10756bd1d3efc5b65bc7d848773242bd27ffc840",
                "sbg:workflowLanguage": "CWL"
            },
            "label": "MCMICRO - Segmentation",
            "scatter": [
                "in_image",
                "in_mask"
            ],
            "scatterMethod": "dotproduct",
            "sbg:x": 1228,
            "sbg:y": -217.57086181640625
        },
        {
            "id": "mcmicro_story",
            "in": [
                {
                    "id": "in_image",
                    "source": "sbg_prepare_segmentation_inputs/out_images"
                }
            ],
            "out": [
                {
                    "id": "out_story"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.2",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "boris_majic/mcmicro-dev/mcmicro-story/3",
                "baseCommand": [
                    "python",
                    "story.py"
                ],
                "inputs": [
                    {
                        "id": "in_image",
                        "type": "File?",
                        "inputBinding": {
                            "prefix": "--in",
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "Input image",
                        "sbg:fileTypes": "TIF, TIFF"
                    }
                ],
                "outputs": [
                    {
                        "id": "out_story",
                        "label": "Story",
                        "type": "File?",
                        "outputBinding": {
                            "glob": "*.json"
                        },
                        "sbg:fileTypes": "JSON"
                    }
                ],
                "label": "MCMICRO - Story",
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "labsyspharm/roadie:2022-10-20"
                    },
                    {
                        "class": "InitialWorkDirRequirement",
                        "listing": [
                            {
                                "entryname": "story.py",
                                "entry": "import json\nimport numpy as np\nimport ome_types\nimport scipy.stats\nimport sklearn.mixture\nimport sys\nimport threadpoolctl\nimport tifffile\nimport zarr\nimport argparse\nimport os\n\ndef auto_threshold(img):\n\n    assert img.ndim == 2\n\n    yi, xi = np.floor(np.linspace(0, img.shape, 200, endpoint=False)).astype(int).T\n    # Slice one dimension at a time. Should generally use less memory than a meshgrid.\n    img = img[yi]\n    img = img[:, xi]\n    img_log = np.log(img[img > 0])\n    gmm = sklearn.mixture.GaussianMixture(3, max_iter=1000, tol=1e-6)\n    gmm.fit(img_log.reshape((-1,1)))\n    means = gmm.means_[:, 0]\n    _, i1, i2 = np.argsort(means)\n    mean1, mean2 = means[[i1, i2]]\n    std1, std2 = gmm.covariances_[[i1, i2], 0, 0] ** 0.5\n\n    x = np.linspace(mean1, mean2, 50)\n    y1 = scipy.stats.norm(mean1, std1).pdf(x) * gmm.weights_[i1]\n    y2 = scipy.stats.norm(mean2, std2).pdf(x) * gmm.weights_[i2]\n\n    lmax = mean2 + 2 * std2\n    lmin = x[np.argmin(np.abs(y1 - y2))]\n    if lmin >= mean2:\n        lmin = mean2 - 2 * std2\n    vmin = max(np.exp(lmin), img.min(), 0)\n    vmax = min(np.exp(lmax), img.max())\n\n    return vmin, vmax\n\n\ndef main(in_path, out_path):\n\n    threadpoolctl.threadpool_limits(1)\n\n    print(f\"opening image: {in_path}\", file=sys.stderr)\n    tiff = tifffile.TiffFile(in_path)\n    ndim = tiff.series[0].ndim\n    if ndim == 2:\n        # FIXME This can be handled easily (promote to 3D array), we just need a\n        # test file to make sure we're doing it right.\n        raise Exception(\"Can't handle 2-dimensional images (yet)\")\n    elif ndim == 3:\n        pass\n    else:\n        raise Exception(f\"Can't handle {ndim}-dimensional images\")\n    # Get smallest pyramid level that's at least 200 in both dimensions.\n    level_series = next(\n        level for level in reversed(tiff.series[0].levels)\n        if all(d >= 200 for d in level.shape[1:])\n    )\n    zarray = zarr.open(level_series.aszarr())\n    signed = not np.issubdtype(zarray.dtype, np.unsignedinteger)\n\n    print(f\"reading metadata\", file=sys.stderr)\n    try:\n        ome = ome_types.from_xml(tiff.pages[0].tags[270].value)\n        ome_px = ome.images[0].pixels\n        pixel_ratio = ome_px.physical_size_x_quantity / ome_px.physical_size_y_quantity\n        if not np.isclose(pixel_ratio, 1):\n            print(\n                \"WARNING: Non-square pixels detected. Using only X-size to set scale bar.\",\n                file=sys.stderr,\n            )\n        pixels_per_micron = 1 / ome_px.physical_size_x_quantity.to(\"um\").magnitude\n        channel_names = [c.name for c in ome_px.channels]\n        for i, n in enumerate(channel_names):\n            if not n:\n                channel_names[i] = f\"Channel {i + 1}\"\n    except:\n        print(\n            \"WARNING: Could not read OME metadata. Story will use generic channel names and\\n\"\n            \"    the scale bar will be omitted.\",\n            file=sys.stderr,\n        )\n        pixels_per_micron = None\n        channel_names = [f\"Channel {i + 1}\" for i in range(zarray.shape[0])]\n\n    story = {\n        \"sample_info\": {\n            \"name\": \"\",\n            \"rotation\": 0,\n            \"text\": \"\",\n            \"pixels_per_micron\": pixels_per_micron,\n        },\n        \"groups\": [],\n        \"waypoints\": [],\n    }\n\n    color_cycle = 'ffffff', 'ff0000', '00ff00', '0000ff'\n\n    scale = np.iinfo(zarray.dtype).max if np.issubdtype(zarray.dtype, np.integer) else 1\n    for gi, idx_start in enumerate(range(0, zarray.shape[0], 4), 1):\n        idx_end = min(idx_start + 4, zarray.shape[0])\n        channel_numbers = range(idx_start, idx_end)\n        channel_defs = []\n        for ci, color in zip(channel_numbers, color_cycle):\n            print(\n                f\"analyzing channel {ci + 1}/{zarray.shape[0]}\", file=sys.stderr\n            )\n            img = zarray[ci]\n            if signed and img.min() < 0:\n                print(\"  WARNING: Ignoring negative pixel values\", file=sys.stderr)\n            vmin, vmax = auto_threshold(img)\n            vmin /= scale\n            vmax /= scale\n            channel_defs.append({\n                \"color\": color,\n                \"id\": ci,\n                \"label\": channel_names[ci],\n                \"min\": vmin,\n                \"max\": vmax,\n            })\n        story[\"groups\"].append({\n            \"label\": f\"Group {gi}\",\n            \"channels\": channel_defs,\n        })\n\n    with open(out_path, 'w') as fout:\n        json.dump(story, fout)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--in', type=str, required=True, help=\"Input Image Path\")\n    parser.add_argument('--out', type=str, required=False, help=\"Output JSON Path\")\n    args = parser.parse_args()\n\n    # Automatically infer the output filename, if not specified\n    in_path = vars(args)['in']\n    out_path = args.out\n    if out_path is None:\n        tokens = os.path.basename(in_path).split(os.extsep)\n        if len(tokens) < 2:       stem = in_path\n        elif tokens[-2] == \"ome\": stem = os.extsep.join(tokens[0:-2])\n        else:                     stem = os.extsep.join(tokens[0:-1])\n        out_path = stem + \".json\"\n\n    main(in_path, out_path)",
                                "writable": false
                            }
                        ]
                    }
                ],
                "sbg:projectName": "MCMICRO - DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675705044,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675707927,
                        "sbg:revisionNotes": "Initial revision"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675708316,
                        "sbg:revisionNotes": "Add code as a file requirement"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675769927,
                        "sbg:revisionNotes": "Fix IO types"
                    }
                ],
                "sbg:image_url": null,
                "sbg:appVersion": [
                    "v1.2"
                ],
                "sbg:id": "h-b146c98b/h-0f5bfcad/h-6f68c704/0",
                "sbg:revision": 3,
                "sbg:revisionNotes": "Fix IO types",
                "sbg:modifiedOn": 1675769927,
                "sbg:modifiedBy": "boris_majic",
                "sbg:createdOn": 1675705044,
                "sbg:createdBy": "boris_majic",
                "sbg:project": "boris_majic/mcmicro-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "boris_majic"
                ],
                "sbg:latestRevision": 3,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "a5dd41ed04d9da40af22b47975762ba2d353f44c10a99b29a572221abbdbe2431",
                "sbg:workflowLanguage": "CWL"
            },
            "label": "MCMICRO - Story",
            "scatter": [
                "in_image"
            ],
            "sbg:x": 1199.2501220703125,
            "sbg:y": 165.6786346435547
        },
        {
            "id": "mcmicro_viz",
            "in": [
                {
                    "id": "in_image",
                    "source": "sbg_prepare_segmentation_inputs/out_images"
                },
                {
                    "id": "in_story",
                    "source": "mcmicro_story/out_story"
                }
            ],
            "out": [
                {
                    "id": "out_viz"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.2",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "boris_majic/mcmicro-dev/mcmicro-viz/3",
                "baseCommand": [
                    "python",
                    "/app/minerva-author/src/save_exhibit_pyramid.py"
                ],
                "inputs": [
                    {
                        "id": "in_image",
                        "type": "File",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 0
                        },
                        "label": "Input Image",
                        "sbg:fileTypes": "TIF, TIFF"
                    },
                    {
                        "id": "in_story",
                        "type": "File",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Story",
                        "sbg:fileTypes": "JSON"
                    }
                ],
                "outputs": [
                    {
                        "id": "out_viz",
                        "type": "Directory?",
                        "outputBinding": {
                            "glob": "${\n    return inputs.in_image.nameroot\n}",
                            "loadListing": "deep_listing"
                        }
                    }
                ],
                "label": "MCMICRO - Viz",
                "arguments": [
                    {
                        "prefix": "",
                        "shellQuote": false,
                        "position": 3,
                        "valueFrom": "${\n    return inputs.in_image.nameroot\n}"
                    }
                ],
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "LoadListingRequirement"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "labsyspharm/auto-minerva:2022-06-06"
                    },
                    {
                        "class": "InlineJavascriptRequirement"
                    }
                ],
                "sbg:projectName": "MCMICRO - DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675704927,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675705011,
                        "sbg:revisionNotes": "Set docker"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675708800,
                        "sbg:revisionNotes": "Initial revision - save all"
                    },
                    {
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675770082,
                        "sbg:revisionNotes": "Fix IO types"
                    }
                ],
                "sbg:image_url": null,
                "sbg:appVersion": [
                    "v1.2"
                ],
                "sbg:id": "h-5cce4aa5/h-14a1c449/h-ecfa9ef2/0",
                "sbg:revision": 3,
                "sbg:revisionNotes": "Fix IO types",
                "sbg:modifiedOn": 1675770082,
                "sbg:modifiedBy": "boris_majic",
                "sbg:createdOn": 1675704927,
                "sbg:createdBy": "boris_majic",
                "sbg:project": "boris_majic/mcmicro-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "boris_majic"
                ],
                "sbg:latestRevision": 3,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "ad9b57ce5f5a4dee20733d8d9bbb256f035b938dcd98f1e311ad95c056bbbfa3d",
                "sbg:workflowLanguage": "CWL"
            },
            "label": "MCMICRO - Viz",
            "scatter": [
                "in_image",
                "in_story"
            ],
            "scatterMethod": "dotproduct",
            "sbg:x": 1471,
            "sbg:y": 118.53583526611328
        },
        {
            "id": "mcmicro_scimap",
            "in": [
                {
                    "id": "in_table",
                    "linkMerge": "merge_flattened",
                    "source": [
                        "mcmicro_segmentation_1/out_tables"
                    ]
                }
            ],
            "out": [
                {
                    "id": "plots"
                }
            ],
            "run": {
                "class": "CommandLineTool",
                "cwlVersion": "v1.2",
                "$namespaces": {
                    "sbg": "https://sevenbridges.com"
                },
                "id": "boris_majic/mcmicro-dev/mcmicro-scimap/2",
                "baseCommand": [
                    "scimap-mcmicro",
                    "-o",
                    "."
                ],
                "inputs": [
                    {
                        "id": "in_table",
                        "type": "File?",
                        "inputBinding": {
                            "shellQuote": false,
                            "position": 1
                        },
                        "label": "Quantification table",
                        "doc": "Output of MCMICRO Quantification",
                        "sbg:fileTypes": "CSV"
                    }
                ],
                "outputs": [
                    {
                        "id": "plots",
                        "doc": "Directory containing plots generated by Scimap",
                        "label": "Plots",
                        "type": [
                            "null",
                            "Directory",
                            {
                                "type": "array",
                                "items": "Directory"
                            }
                        ],
                        "outputBinding": {
                            "glob": "plots",
                            "loadListing": "deep_listing"
                        }
                    }
                ],
                "label": "MCMICRO - Scimap",
                "requirements": [
                    {
                        "class": "ShellCommandRequirement"
                    },
                    {
                        "class": "LoadListingRequirement"
                    },
                    {
                        "class": "DockerRequirement",
                        "dockerPull": "labsyspharm/scimap:0.17.7"
                    }
                ],
                "sbg:projectName": "MCMICRO - DEV",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675770956,
                        "sbg:revisionNotes": null
                    },
                    {
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675771585,
                        "sbg:revisionNotes": "Initial revision"
                    },
                    {
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "boris_majic",
                        "sbg:modifiedOn": 1675772189,
                        "sbg:revisionNotes": "Set proper output type"
                    }
                ],
                "sbg:image_url": null,
                "sbg:appVersion": [
                    "v1.2"
                ],
                "sbg:id": "h-9fc65743/h-19f495b2/h-a728a69e/0",
                "sbg:revision": 2,
                "sbg:revisionNotes": "Set proper output type",
                "sbg:modifiedOn": 1675772189,
                "sbg:modifiedBy": "boris_majic",
                "sbg:createdOn": 1675770956,
                "sbg:createdBy": "boris_majic",
                "sbg:project": "boris_majic/mcmicro-dev",
                "sbg:sbgMaintained": false,
                "sbg:validationErrors": [],
                "sbg:contributors": [
                    "boris_majic"
                ],
                "sbg:latestRevision": 2,
                "sbg:publisher": "sbg",
                "sbg:content_hash": "acf517fdff5bc0771e5791a3782d0ccd511e8ba050770f825b4d4cb995be9d3ec",
                "sbg:workflowLanguage": "CWL"
            },
            "label": "MCMICRO - Scimap",
            "scatter": [
                "in_table"
            ],
            "sbg:x": 1614.5323486328125,
            "sbg:y": -295.0194091796875
        }
    ],
    "requirements": [
        {
            "class": "LoadListingRequirement"
        },
        {
            "class": "SubworkflowFeatureRequirement"
        },
        {
            "class": "ScatterFeatureRequirement"
        },
        {
            "class": "MultipleInputFeatureRequirement"
        },
        {
            "class": "InlineJavascriptRequirement"
        },
        {
            "class": "StepInputExpressionRequirement"
        }
    ],
    "sbg:projectName": "htan-mcmicro-testing",
    "sbg:revisionsInfo": [
        {
            "sbg:revision": 0,
            "sbg:modifiedBy": "adamjtaylor",
            "sbg:modifiedOn": 1680183178,
            "sbg:revisionNotes": "Copy of admin/sbg-public-data/mcmicro/0"
        }
    ],
    "sbg:image_url": "https://cgc.sbgenomics.com/ns/brood/images/adamjtaylor/htan-mcmicro-testing/mcmicro/0.png",
    "sbg:license": "MIT",
    "sbg:toolAuthor": "HMS Laboratory of Systems Pharmacology.",
    "sbg:wrapperAuthor": "SBG",
    "sbg:categories": [
        "Imaging"
    ],
    "sbg:links": [
        {
            "id": "https://github.com/labsyspharm/mcmicro",
            "label": "Git"
        },
        {
            "id": "https://www.nature.com/articles/s41592-021-01308-y",
            "label": "Publication"
        },
        {
            "id": "https://github.com/labsyspharm/mcmicro/blob/master/docs/how-to-use.md",
            "label": "Wiki"
        },
        {
            "id": "https://mcmicro.org/",
            "label": "Homepage"
        }
    ],
    "sbg:expand_workflow": false,
    "sbg:appVersion": [
        "v1.2"
    ],
    "id": "https://cgc-api.sbgenomics.com/v2/apps/adamjtaylor/htan-mcmicro-testing/mcmicro/0/raw/",
    "sbg:id": "adamjtaylor/htan-mcmicro-testing/mcmicro/0",
    "sbg:revision": 0,
    "sbg:revisionNotes": "Copy of admin/sbg-public-data/mcmicro/0",
    "sbg:modifiedOn": 1680183178,
    "sbg:modifiedBy": "adamjtaylor",
    "sbg:createdOn": 1680183178,
    "sbg:createdBy": "adamjtaylor",
    "sbg:project": "adamjtaylor/htan-mcmicro-testing",
    "sbg:sbgMaintained": false,
    "sbg:validationErrors": [],
    "sbg:contributors": [
        "adamjtaylor"
    ],
    "sbg:latestRevision": 0,
    "sbg:publisher": "sbg",
    "sbg:content_hash": "aea1c99c25b804ba1f006e27c5926c50c6d7cf5ef8c09a3f380af63982dfdd842",
    "sbg:workflowLanguage": "CWL",
    "sbg:copyOf": "admin/sbg-public-data/mcmicro/0"
}
